package masc

file_number 0 "/home/mark/MASC-AI-Synthesized-Cryptoprocessor/AI_generated/top_level/masc.x"

fn __masc__ror(rs1: bits[32], rs2: bits[32]) -> bits[32] {
  literal.3: bits[32] = literal(value=31, id=3, pos=[(0,3,38)])
  literal.6: bits[32] = literal(value=32, id=6, pos=[(0,4,41)])
  shift_amount: bits[32] = and(rs2, literal.3, id=4, pos=[(0,3,32)])
  sub.7: bits[32] = sub(literal.6, shift_amount, id=7, pos=[(0,4,44)])
  shrl.5: bits[32] = shrl(rs1, shift_amount, id=5, pos=[(0,4,9)])
  shll.8: bits[32] = shll(rs1, sub.7, id=8, pos=[(0,4,33)])
  ret or.9: bits[32] = or(shrl.5, shll.8, id=9, pos=[(0,4,26)])
}

fn __masc__rol(rs1: bits[32], rs2: bits[32]) -> bits[32] {
  literal.12: bits[32] = literal(value=31, id=12, pos=[(0,8,31)])
  literal.15: bits[32] = literal(value=32, id=15, pos=[(0,9,34)])
  shamt: bits[32] = and(rs2, literal.12, id=13, pos=[(0,8,25)])
  sub.16: bits[32] = sub(literal.15, shamt, id=16, pos=[(0,9,37)])
  shll.14: bits[32] = shll(rs1, shamt, id=14, pos=[(0,9,9)])
  shrl.17: bits[32] = shrl(rs1, sub.16, id=17, pos=[(0,9,26)])
  ret or.18: bits[32] = or(shll.14, shrl.17, id=18, pos=[(0,9,19)])
}

fn __masc__rori(rs1: bits[32], shamt: bits[32]) -> bits[32] {
  literal.22: bits[32] = literal(value=32, id=22, pos=[(0,13,34)])
  sub.23: bits[32] = sub(literal.22, shamt, id=23, pos=[(0,13,37)])
  shrl.21: bits[32] = shrl(rs1, shamt, id=21, pos=[(0,13,9)])
  shll.24: bits[32] = shll(rs1, sub.23, id=24, pos=[(0,13,26)])
  ret or.25: bits[32] = or(shrl.21, shll.24, id=25, pos=[(0,13,19)])
}

fn __masc__andn(rs1: bits[32], rs2: bits[32]) -> bits[32] {
  not.28: bits[32] = not(rs2, id=28, pos=[(0,17,11)])
  ret and.29: bits[32] = and(rs1, not.28, id=29, pos=[(0,17,8)])
}

fn __masc__orn(rs1: bits[32], rs2: bits[32]) -> bits[32] {
  not.32: bits[32] = not(rs2, id=32, pos=[(0,21,11)])
  ret or.33: bits[32] = or(rs1, not.32, id=33, pos=[(0,21,8)])
}

fn __masc__xnor(rs1: bits[32], rs2: bits[32]) -> bits[32] {
  xor.36: bits[32] = xor(rs1, rs2, id=36, pos=[(0,25,10)])
  ret not.37: bits[32] = not(xor.36, id=37, pos=[(0,25,4)])
}

fn __masc__pack(rs1: bits[32], rs2: bits[32]) -> bits[32] {
  literal.42: bits[32] = literal(value=65535, id=42, pos=[(0,29,37)])
  literal.40: bits[32] = literal(value=65535, id=40, pos=[(0,29,15)])
  and.43: bits[32] = and(rs2, literal.42, id=43, pos=[(0,29,31)])
  literal.44: bits[32] = literal(value=16, id=44, pos=[(0,29,52)])
  and.41: bits[32] = and(rs1, literal.40, id=41, pos=[(0,29,9)])
  shll.45: bits[32] = shll(and.43, literal.44, id=45, pos=[(0,29,45)])
  ret or.46: bits[32] = or(and.41, shll.45, id=46, pos=[(0,29,23)])
}

fn __masc__packh(rs1: bits[32], rs2: bits[32]) -> bits[32] {
  literal.51: bits[32] = literal(value=255, id=51, pos=[(0,33,35)])
  literal.49: bits[32] = literal(value=255, id=49, pos=[(0,33,15)])
  and.52: bits[32] = and(rs2, literal.51, id=52, pos=[(0,33,29)])
  literal.53: bits[32] = literal(value=8, id=53, pos=[(0,33,48)])
  and.50: bits[32] = and(rs1, literal.49, id=50, pos=[(0,33,9)])
  shll.54: bits[32] = shll(and.52, literal.53, id=54, pos=[(0,33,41)])
  ret or.55: bits[32] = or(and.50, shll.54, id=55, pos=[(0,33,21)])
}

fn __masc__reverse_byte(input_bits: bits[32]) -> bits[32] {
  literal.57: bits[32] = literal(value=0, id=57, pos=[(0,37,39)])
  literal.61: bits[32] = literal(value=1, id=61, pos=[(0,38,39)])
  shrl.58: bits[32] = shrl(input_bits, literal.57, id=58, pos=[(0,37,32)])
  literal.59: bits[32] = literal(value=1, id=59, pos=[(0,37,48)])
  shrl.62: bits[32] = shrl(input_bits, literal.61, id=62, pos=[(0,38,32)])
  literal.63: bits[32] = literal(value=1, id=63, pos=[(0,38,48)])
  literal.65: bits[32] = literal(value=2, id=65, pos=[(0,39,39)])
  bit0: bits[32] = and(shrl.58, literal.59, id=60, pos=[(0,37,42)])
  literal.89: bits[32] = literal(value=7, id=89, pos=[(0,46,17)])
  bit1: bits[32] = and(shrl.62, literal.63, id=64, pos=[(0,38,42)])
  literal.91: bits[32] = literal(value=6, id=91, pos=[(0,46,35)])
  shrl.66: bits[32] = shrl(input_bits, literal.65, id=66, pos=[(0,39,32)])
  literal.67: bits[32] = literal(value=1, id=67, pos=[(0,39,48)])
  literal.69: bits[32] = literal(value=3, id=69, pos=[(0,40,39)])
  shll.90: bits[32] = shll(bit0, literal.89, id=90, pos=[(0,46,10)])
  shll.92: bits[32] = shll(bit1, literal.91, id=92, pos=[(0,46,28)])
  bit2: bits[32] = and(shrl.66, literal.67, id=68, pos=[(0,39,42)])
  literal.94: bits[32] = literal(value=5, id=94, pos=[(0,46,53)])
  shrl.70: bits[32] = shrl(input_bits, literal.69, id=70, pos=[(0,40,32)])
  literal.71: bits[32] = literal(value=1, id=71, pos=[(0,40,48)])
  literal.73: bits[32] = literal(value=4, id=73, pos=[(0,41,39)])
  or.93: bits[32] = or(shll.90, shll.92, id=93, pos=[(0,46,20)])
  shll.95: bits[32] = shll(bit2, literal.94, id=95, pos=[(0,46,46)])
  bit3: bits[32] = and(shrl.70, literal.71, id=72, pos=[(0,40,42)])
  literal.97: bits[32] = literal(value=4, id=97, pos=[(0,46,71)])
  shrl.74: bits[32] = shrl(input_bits, literal.73, id=74, pos=[(0,41,32)])
  literal.75: bits[32] = literal(value=1, id=75, pos=[(0,41,48)])
  literal.77: bits[32] = literal(value=5, id=77, pos=[(0,42,39)])
  or.96: bits[32] = or(or.93, shll.95, id=96, pos=[(0,46,38)])
  shll.98: bits[32] = shll(bit3, literal.97, id=98, pos=[(0,46,64)])
  bit4: bits[32] = and(shrl.74, literal.75, id=76, pos=[(0,41,42)])
  literal.100: bits[32] = literal(value=3, id=100, pos=[(0,47,17)])
  shrl.78: bits[32] = shrl(input_bits, literal.77, id=78, pos=[(0,42,32)])
  literal.79: bits[32] = literal(value=1, id=79, pos=[(0,42,48)])
  literal.81: bits[32] = literal(value=6, id=81, pos=[(0,43,39)])
  or.99: bits[32] = or(or.96, shll.98, id=99, pos=[(0,46,56)])
  shll.101: bits[32] = shll(bit4, literal.100, id=101, pos=[(0,47,10)])
  bit5: bits[32] = and(shrl.78, literal.79, id=80, pos=[(0,42,42)])
  literal.103: bits[32] = literal(value=2, id=103, pos=[(0,47,35)])
  shrl.82: bits[32] = shrl(input_bits, literal.81, id=82, pos=[(0,43,32)])
  literal.83: bits[32] = literal(value=1, id=83, pos=[(0,43,48)])
  or.102: bits[32] = or(or.99, shll.101, id=102, pos=[(0,46,74)])
  shll.104: bits[32] = shll(bit5, literal.103, id=104, pos=[(0,47,28)])
  bit6: bits[32] = and(shrl.82, literal.83, id=84, pos=[(0,43,42)])
  literal.106: bits[32] = literal(value=1, id=106, pos=[(0,47,53)])
  literal.85: bits[32] = literal(value=7, id=85, pos=[(0,44,39)])
  or.105: bits[32] = or(or.102, shll.104, id=105, pos=[(0,47,20)])
  shll.107: bits[32] = shll(bit6, literal.106, id=107, pos=[(0,47,46)])
  shrl.86: bits[32] = shrl(input_bits, literal.85, id=86, pos=[(0,44,32)])
  literal.87: bits[32] = literal(value=1, id=87, pos=[(0,44,48)])
  or.108: bits[32] = or(or.105, shll.107, id=108, pos=[(0,47,38)])
  bit7: bits[32] = and(shrl.86, literal.87, id=88, pos=[(0,44,42)])
  ret or.109: bits[32] = or(or.108, bit7, id=109, pos=[(0,47,56)])
}

fn __masc__brev8(rs: bits[32]) -> bits[32] {
  literal.114: bits[32] = literal(value=8, id=114, pos=[(0,52,45)])
  shrl.115: bits[32] = shrl(rs, literal.114, id=115, pos=[(0,52,38)])
  literal.116: bits[32] = literal(value=255, id=116, pos=[(0,52,54)])
  literal.119: bits[32] = literal(value=16, id=119, pos=[(0,53,45)])
  literal.111: bits[32] = literal(value=255, id=111, pos=[(0,51,43)])
  and.117: bits[32] = and(shrl.115, literal.116, id=117, pos=[(0,52,48)])
  shrl.120: bits[32] = shrl(rs, literal.119, id=120, pos=[(0,53,38)])
  literal.121: bits[32] = literal(value=255, id=121, pos=[(0,53,55)])
  literal.124: bits[32] = literal(value=24, id=124, pos=[(0,54,45)])
  and.112: bits[32] = and(rs, literal.111, id=112, pos=[(0,51,37)])
  byte1: bits[32] = invoke(and.117, to_apply=__masc__reverse_byte, id=118, pos=[(0,52,33)])
  literal.129: bits[32] = literal(value=8, id=129, pos=[(0,56,26)])
  and.122: bits[32] = and(shrl.120, literal.121, id=122, pos=[(0,53,49)])
  shrl.125: bits[32] = shrl(rs, literal.124, id=125, pos=[(0,54,38)])
  literal.126: bits[32] = literal(value=255, id=126, pos=[(0,54,55)])
  byte0: bits[32] = invoke(and.112, to_apply=__masc__reverse_byte, id=113, pos=[(0,51,33)])
  shll.130: bits[32] = shll(byte1, literal.129, id=130, pos=[(0,56,19)])
  byte2: bits[32] = invoke(and.122, to_apply=__masc__reverse_byte, id=123, pos=[(0,53,33)])
  literal.132: bits[32] = literal(value=16, id=132, pos=[(0,56,45)])
  and.127: bits[32] = and(shrl.125, literal.126, id=127, pos=[(0,54,49)])
  or.131: bits[32] = or(byte0, shll.130, id=131, pos=[(0,56,10)])
  shll.133: bits[32] = shll(byte2, literal.132, id=133, pos=[(0,56,38)])
  byte3: bits[32] = invoke(and.127, to_apply=__masc__reverse_byte, id=128, pos=[(0,54,33)])
  literal.135: bits[32] = literal(value=24, id=135, pos=[(0,56,65)])
  or.134: bits[32] = or(or.131, shll.133, id=134, pos=[(0,56,29)])
  shll.136: bits[32] = shll(byte3, literal.135, id=136, pos=[(0,56,58)])
  ret or.137: bits[32] = or(or.134, shll.136, id=137, pos=[(0,56,49)])
}

fn __masc__rev8(rs: bits[32]) -> bits[32] {
  literal.141: bits[32] = literal(value=8, id=141, pos=[(0,61,32)])
  literal.139: bits[32] = literal(value=255, id=139, pos=[(0,60,30)])
  shrl.142: bits[32] = shrl(rs, literal.141, id=142, pos=[(0,61,25)])
  literal.143: bits[32] = literal(value=255, id=143, pos=[(0,61,41)])
  literal.145: bits[32] = literal(value=16, id=145, pos=[(0,62,32)])
  byte0: bits[32] = and(rs, literal.139, id=140, pos=[(0,60,24)])
  literal.153: bits[32] = literal(value=24, id=153, pos=[(0,65,17)])
  byte1: bits[32] = and(shrl.142, literal.143, id=144, pos=[(0,61,35)])
  literal.155: bits[32] = literal(value=16, id=155, pos=[(0,65,35)])
  shrl.146: bits[32] = shrl(rs, literal.145, id=146, pos=[(0,62,25)])
  literal.147: bits[32] = literal(value=255, id=147, pos=[(0,62,42)])
  shll.154: bits[32] = shll(byte0, literal.153, id=154, pos=[(0,65,10)])
  shll.156: bits[32] = shll(byte1, literal.155, id=156, pos=[(0,65,28)])
  byte2: bits[32] = and(shrl.146, literal.147, id=148, pos=[(0,62,36)])
  literal.158: bits[32] = literal(value=8, id=158, pos=[(0,65,53)])
  literal.149: bits[32] = literal(value=24, id=149, pos=[(0,63,32)])
  or.157: bits[32] = or(shll.154, shll.156, id=157, pos=[(0,65,20)])
  shll.159: bits[32] = shll(byte2, literal.158, id=159, pos=[(0,65,46)])
  shrl.150: bits[32] = shrl(rs, literal.149, id=150, pos=[(0,63,25)])
  literal.151: bits[32] = literal(value=255, id=151, pos=[(0,63,42)])
  or.160: bits[32] = or(or.157, shll.159, id=160, pos=[(0,65,38)])
  byte3: bits[32] = and(shrl.150, literal.151, id=152, pos=[(0,63,36)])
  ret or.161: bits[32] = or(or.160, byte3, id=161, pos=[(0,65,55)])
}

fn ____masc__zip_counted_for_0_body(i: bits[32], acc: bits[32], rs1: bits[32]) -> bits[32] {
  literal.166: bits[32] = literal(value=0, id=166)
  add.167: bits[32] = add(i, literal.166, id=167)
  literal.170: bits[32] = literal(value=16, id=170, pos=[(0,69,8)])
  add.174: bits[32] = add(add.167, literal.170, id=174, pos=[(0,72,40)])
  literal.181: bits[32] = literal(value=2, id=181, pos=[(0,73,81)])
  shrl.171: bits[32] = shrl(rs1, add.167, id=171, pos=[(0,71,34)])
  literal.172: bits[32] = literal(value=1, id=172, pos=[(0,71,46)])
  literal.178: bits[32] = literal(value=2, id=178, pos=[(0,73,52)])
  shrl.175: bits[32] = shrl(rs1, add.174, id=175, pos=[(0,72,34)])
  literal.176: bits[32] = literal(value=1, id=176, pos=[(0,72,60)])
  umul.182: bits[32] = umul(literal.181, add.167, id=182, pos=[(0,73,83)])
  literal.183: bits[32] = literal(value=1, id=183, pos=[(0,73,93)])
  lower_bit: bits[32] = and(shrl.171, literal.172, id=173, pos=[(0,71,40)])
  umul.179: bits[32] = umul(literal.178, add.167, id=179, pos=[(0,73,54)])
  upper_bit: bits[32] = and(shrl.175, literal.176, id=177, pos=[(0,72,54)])
  add.184: bits[32] = add(umul.182, literal.183, id=184, pos=[(0,73,87)])
  shll.180: bits[32] = shll(lower_bit, umul.179, id=180, pos=[(0,73,44)])
  shll.185: bits[32] = shll(upper_bit, add.184, id=185, pos=[(0,73,73)])
  combined_bits: bits[32] = or(shll.180, shll.185, id=186, pos=[(0,73,60)])
  ret or.187: bits[32] = or(acc, combined_bits, id=187, pos=[(0,74,12)])
}

fn __masc__zip(rs1: bits[32]) -> bits[32] {
  literal.164: bits[32] = literal(value=0, id=164, pos=[(0,75,10)])
  xlen_half: bits[32] = literal(value=16, id=163, pos=[(0,69,29)])
  ret result: bits[32] = counted_for(literal.164, trip_count=16, stride=1, body=____masc__zip_counted_for_0_body, invariant_args=[rs1], id=188)
}

fn ____masc__unzip_counted_for_0_body(i: bits[32], acc: bits[32], rs1: bits[32]) -> bits[32] {
  literal.193: bits[32] = literal(value=0, id=193)
  add.194: bits[32] = add(i, literal.193, id=194)
  literal.198: bits[32] = literal(value=2, id=198, pos=[(0,85,45)])
  literal.203: bits[32] = literal(value=2, id=203, pos=[(0,86,44)])
  umul.199: bits[32] = umul(add.194, literal.198, id=199, pos=[(0,85,39)])
  umul.204: bits[32] = umul(add.194, literal.203, id=204, pos=[(0,86,38)])
  literal.205: bits[32] = literal(value=1, id=205, pos=[(0,86,52)])
  shrl.200: bits[32] = shrl(rs1, umul.199, id=200, pos=[(0,85,33)])
  literal.201: bits[32] = literal(value=1, id=201, pos=[(0,85,55)])
  add.206: bits[32] = add(umul.204, literal.205, id=206, pos=[(0,86,46)])
  even_bit: bits[32] = and(shrl.200, literal.201, id=202, pos=[(0,85,49)])
  shrl.207: bits[32] = shrl(rs1, add.206, id=207, pos=[(0,86,32)])
  literal.208: bits[32] = literal(value=1, id=208, pos=[(0,86,62)])
  literal.197: bits[32] = literal(value=16, id=197, pos=[(0,81,8)])
  shll.210: bits[32] = shll(even_bit, add.194, id=210, pos=[(0,88,24)])
  odd_bit: bits[32] = and(shrl.207, literal.208, id=209, pos=[(0,86,56)])
  add.212: bits[32] = add(add.194, literal.197, id=212, pos=[(0,88,47)])
  add.211: bits[32] = add(acc, shll.210, id=211, pos=[(0,88,12)])
  shll.213: bits[32] = shll(odd_bit, add.212, id=213, pos=[(0,88,41)])
  ret add.214: bits[32] = add(add.211, shll.213, id=214, pos=[(0,88,30)])
}

fn __masc__unzip(rs1: bits[32]) -> bits[32] {
  literal.191: bits[32] = literal(value=0, id=191, pos=[(0,89,10)])
  xlen_half: bits[32] = literal(value=16, id=190, pos=[(0,81,29)])
  ret rd: bits[32] = counted_for(literal.191, trip_count=16, stride=1, body=____masc__unzip_counted_for_0_body, invariant_args=[rs1], id=215)
}

fn __masc__sha512sum0r(rs1: bits[32], rs2: bits[32]) -> bits[32] {
  XLEN: bits[32] = literal(value=32, id=218, pos=[(0,0,22)])
  literal.219: bits[32] = literal(value=64, id=219, pos=[(0,181,45)])
  eq.220: bits[1] = eq(XLEN, literal.219, id=220, pos=[(0,181,38)])
  literal.222: bits[32] = literal(value=2, id=222, pos=[(0,181,70)])
  literal.221: bits[32] = literal(value=34, id=221, pos=[(0,181,54)])
  literal.224: bits[32] = literal(value=64, id=224, pos=[(0,183,45)])
  literal.229: bits[32] = literal(value=28, id=229, pos=[(0,189,39)])
  rotation_val_2: bits[32] = sel(eq.220, cases=[literal.222, literal.221], id=223, pos=[(0,181,30)])
  eq.225: bits[1] = eq(XLEN, literal.224, id=225, pos=[(0,183,38)])
  literal.227: bits[32] = literal(value=7, id=227, pos=[(0,183,70)])
  literal.226: bits[32] = literal(value=39, id=226, pos=[(0,183,54)])
  rotation_1: bits[32] = invoke(rs1, literal.229, to_apply=__masc__ror, id=230, pos=[(0,189,29)])
  rotation_2: bits[32] = invoke(rs1, rotation_val_2, to_apply=__masc__ror, id=231, pos=[(0,191,29)])
  rotation_val_3: bits[32] = sel(eq.225, cases=[literal.227, literal.226], id=228, pos=[(0,183,30)])
  xor.233: bits[32] = xor(rotation_1, rotation_2, id=233, pos=[(0,199,33)])
  rotation_3: bits[32] = invoke(rs1, rotation_val_3, to_apply=__masc__ror, id=232, pos=[(0,193,29)])
  ret result: bits[32] = xor(xor.233, rotation_3, id=234, pos=[(0,199,46)])
}

fn __masc__sha256sum0(rs1: bits[32]) -> bits[32] {
  literal.236: bits[32] = literal(value=2, id=236, pos=[(0,114,29)])
  literal.238: bits[32] = literal(value=13, id=238, pos=[(0,115,29)])
  rot_a: bits[32] = invoke(rs1, literal.236, to_apply=__masc__ror, id=237, pos=[(0,114,19)])
  rot_b: bits[32] = invoke(rs1, literal.238, to_apply=__masc__ror, id=239, pos=[(0,115,19)])
  literal.240: bits[32] = literal(value=22, id=240, pos=[(0,116,29)])
  xor.242: bits[32] = xor(rot_a, rot_b, id=242, pos=[(0,117,10)])
  rot_c: bits[32] = invoke(rs1, literal.240, to_apply=__masc__ror, id=241, pos=[(0,116,19)])
  ret xor.243: bits[32] = xor(xor.242, rot_c, id=243, pos=[(0,117,18)])
}

fn __masc__sha512sig0l(rs1: bits[32], rs2: bits[32]) -> bits[32] {
  literal.246: bits[32] = literal(value=1, id=246, pos=[(0,145,34)])
  literal.248: bits[32] = literal(value=8, id=248, pos=[(0,146,34)])
  rotation_1: bits[32] = invoke(rs1, literal.246, to_apply=__masc__ror, id=247, pos=[(0,145,24)])
  rotation_2: bits[32] = invoke(rs1, literal.248, to_apply=__masc__ror, id=249, pos=[(0,146,24)])
  literal.250: bits[32] = literal(value=7, id=250, pos=[(0,147,29)])
  xor.254: bits[32] = xor(rotation_1, rotation_2, id=254, pos=[(0,152,15)])
  shift_1: bits[32] = shrl(rs1, literal.250, id=251, pos=[(0,147,22)])
  xor.255: bits[32] = xor(xor.254, shift_1, id=255, pos=[(0,152,28)])
  combined_1: bits[32] = and(rotation_1, rs2, id=252, pos=[(0,149,32)])
  xor.256: bits[32] = xor(xor.255, combined_1, id=256, pos=[(0,152,38)])
  combined_2: bits[32] = or(rotation_2, rs2, id=253, pos=[(0,150,32)])
  ret xor.257: bits[32] = xor(xor.256, combined_2, id=257, pos=[(0,152,51)])
}

fn __masc__sha256sig0(rs1: bits[32]) -> bits[32] {
  literal.259: bits[32] = literal(value=7, id=259, pos=[(0,95,30)])
  literal.261: bits[32] = literal(value=18, id=261, pos=[(0,96,31)])
  rotate_7: bits[32] = invoke(rs1, literal.259, to_apply=__masc__ror, id=260, pos=[(0,95,20)])
  rotate_18: bits[32] = invoke(rs1, literal.261, to_apply=__masc__ror, id=262, pos=[(0,96,21)])
  literal.263: bits[32] = literal(value=3, id=263, pos=[(0,97,27)])
  xor.265: bits[32] = xor(rotate_7, rotate_18, id=265, pos=[(0,99,11)])
  shift_3: bits[32] = shrl(rs1, literal.263, id=264, pos=[(0,97,20)])
  ret xor.266: bits[32] = xor(xor.265, shift_3, id=266, pos=[(0,99,23)])
}

fn __masc__sha256sum1(rs1: bits[32]) -> bits[32] {
  literal.268: bits[32] = literal(value=6, id=268, pos=[(0,122,32)])
  literal.270: bits[32] = literal(value=11, id=270, pos=[(0,123,32)])
  rotation_1: bits[32] = invoke(rs1, literal.268, to_apply=__masc__ror, id=269, pos=[(0,122,22)])
  rotation_2: bits[32] = invoke(rs1, literal.270, to_apply=__masc__ror, id=271, pos=[(0,123,22)])
  literal.272: bits[32] = literal(value=25, id=272, pos=[(0,124,32)])
  xor.274: bits[32] = xor(rotation_1, rotation_2, id=274, pos=[(0,125,13)])
  rotation_3: bits[32] = invoke(rs1, literal.272, to_apply=__masc__ror, id=273, pos=[(0,124,22)])
  ret xor.275: bits[32] = xor(xor.274, rotation_3, id=275, pos=[(0,125,26)])
}

fn __masc__sha512sig1h(rs1: bits[32], rs2: bits[32]) -> bits[32] {
  literal.278: bits[32] = literal(value=3, id=278, pos=[(0,156,16)])
  literal.280: bits[32] = literal(value=6, id=280, pos=[(0,157,16)])
  shll.279: bits[32] = shll(rs1, literal.278, id=279, pos=[(0,156,9)])
  shrl.281: bits[32] = shrl(rs1, literal.280, id=281, pos=[(0,157,9)])
  literal.283: bits[32] = literal(value=19, id=283, pos=[(0,158,16)])
  xor.282: bits[32] = xor(shll.279, shrl.281, id=282, pos=[(0,156,19)])
  shrl.284: bits[32] = shrl(rs1, literal.283, id=284, pos=[(0,158,9)])
  literal.286: bits[32] = literal(value=29, id=286, pos=[(0,159,16)])
  xor.285: bits[32] = xor(xor.282, shrl.284, id=285, pos=[(0,157,19)])
  shrl.287: bits[32] = shrl(rs2, literal.286, id=287, pos=[(0,159,9)])
  literal.289: bits[32] = literal(value=13, id=289, pos=[(0,160,16)])
  xor.288: bits[32] = xor(xor.285, shrl.287, id=288, pos=[(0,158,20)])
  shll.290: bits[32] = shll(rs2, literal.289, id=290, pos=[(0,160,9)])
  ret xor.291: bits[32] = xor(xor.288, shll.290, id=291, pos=[(0,159,20)])
}

fn __masc__sha512sig0h(rs1: bits[32], rs2: bits[32]) -> bits[32] {
  literal.294: bits[32] = literal(value=28, id=294, pos=[(0,131,32)])
  literal.296: bits[32] = literal(value=34, id=296, pos=[(0,132,32)])
  rotation_1: bits[32] = invoke(rs1, literal.294, to_apply=__masc__ror, id=295, pos=[(0,131,22)])
  rotation_2: bits[32] = invoke(rs1, literal.296, to_apply=__masc__ror, id=297, pos=[(0,132,22)])
  literal.298: bits[32] = literal(value=39, id=298, pos=[(0,133,32)])
  xor.303: bits[32] = xor(rotation_1, rotation_2, id=303, pos=[(0,140,13)])
  rotation_3: bits[32] = invoke(rs1, literal.298, to_apply=__masc__ror, id=299, pos=[(0,133,22)])
  xor.304: bits[32] = xor(xor.303, rotation_3, id=304, pos=[(0,140,26)])
  combined_1: bits[32] = and(rotation_1, rs2, id=300, pos=[(0,135,30)])
  xor.305: bits[32] = xor(xor.304, combined_1, id=305, pos=[(0,140,39)])
  combined_2: bits[32] = or(rotation_2, rs2, id=301, pos=[(0,136,30)])
  xor.306: bits[32] = xor(xor.305, combined_2, id=306, pos=[(0,140,52)])
  combined_3: bits[32] = xor(rotation_3, rs2, id=302, pos=[(0,137,30)])
  ret xor.307: bits[32] = xor(xor.306, combined_3, id=307, pos=[(0,140,65)])
}

fn __masc__sha512sig1l(rs1: bits[32], rs2: bits[32]) -> bits[32] {
  literal.310: bits[32] = literal(value=3, id=310, pos=[(0,164,33)])
  literal.312: bits[32] = literal(value=6, id=312, pos=[(0,165,33)])
  rs1_shift_3: bits[32] = shll(rs1, literal.310, id=311, pos=[(0,164,26)])
  rs1_shift_6: bits[32] = shrl(rs1, literal.312, id=313, pos=[(0,165,26)])
  literal.314: bits[32] = literal(value=19, id=314, pos=[(0,166,34)])
  xor.322: bits[32] = xor(rs1_shift_3, rs1_shift_6, id=322, pos=[(0,172,29)])
  rs1_shift_19: bits[32] = shrl(rs1, literal.314, id=315, pos=[(0,166,27)])
  literal.316: bits[32] = literal(value=29, id=316, pos=[(0,168,40)])
  xor.323: bits[32] = xor(xor.322, rs1_shift_19, id=323, pos=[(0,172,43)])
  rs2_shift_right_29: bits[32] = shrl(rs2, literal.316, id=317, pos=[(0,168,33)])
  literal.318: bits[32] = literal(value=26, id=318, pos=[(0,169,39)])
  xor.324: bits[32] = xor(xor.323, rs2_shift_right_29, id=324, pos=[(0,172,58)])
  rs2_shift_left_26: bits[32] = shll(rs2, literal.318, id=319, pos=[(0,169,32)])
  literal.320: bits[32] = literal(value=13, id=320, pos=[(0,170,39)])
  xor.325: bits[32] = xor(xor.324, rs2_shift_left_26, id=325, pos=[(0,172,79)])
  rs2_shift_left_13: bits[32] = shll(rs2, literal.320, id=321, pos=[(0,170,32)])
  ret result: bits[32] = xor(xor.325, rs2_shift_left_13, id=326, pos=[(0,172,99)])
}

fn __masc__SHA512SUM1R(rs1: bits[32], rs2: bits[32]) -> bits[32] {
  literal.329: bits[32] = literal(value=19, id=329, pos=[(0,209,39)])
  literal.331: bits[32] = literal(value=29, id=331, pos=[(0,210,39)])
  rotation_1: bits[32] = invoke(rs1, literal.329, to_apply=__masc__ror, id=330, pos=[(0,209,29)])
  rotation_2: bits[32] = invoke(rs1, literal.331, to_apply=__masc__ror, id=332, pos=[(0,210,29)])
  literal.333: bits[32] = literal(value=6, id=333, pos=[(0,211,34)])
  xor.335: bits[32] = xor(rotation_1, rotation_2, id=335, pos=[(0,213,15)])
  shifted: bits[32] = shrl(rs1, literal.333, id=334, pos=[(0,211,27)])
  ret xor.336: bits[32] = xor(xor.335, shifted, id=336, pos=[(0,213,28)])
}

fn __masc__right_rotate(value: bits[32], shift: bits[32]) -> bits[32] {
  literal.340: bits[32] = literal(value=32, id=340, pos=[(0,103,38)])
  sub.341: bits[32] = sub(literal.340, shift, id=341, pos=[(0,103,41)])
  shrl.339: bits[32] = shrl(value, shift, id=339, pos=[(0,103,11)])
  shll.342: bits[32] = shll(value, sub.341, id=342, pos=[(0,103,30)])
  ret or.343: bits[32] = or(shrl.339, shll.342, id=343, pos=[(0,103,21)])
}

fn __masc__sha256sig1(rs1: bits[32]) -> bits[32] {
  literal.345: bits[32] = literal(value=17, id=345, pos=[(0,107,39)])
  literal.347: bits[32] = literal(value=19, id=347, pos=[(0,108,39)])
  rot_17: bits[32] = invoke(rs1, literal.345, to_apply=__masc__right_rotate, id=346, pos=[(0,107,29)])
  rot_19: bits[32] = invoke(rs1, literal.347, to_apply=__masc__right_rotate, id=348, pos=[(0,108,29)])
  literal.349: bits[32] = literal(value=10, id=349, pos=[(0,109,31)])
  xor.351: bits[32] = xor(rot_17, rot_19, id=351, pos=[(0,110,11)])
  rshift_10: bits[32] = shrl(rs1, literal.349, id=350, pos=[(0,109,24)])
  ret xor.352: bits[32] = xor(xor.351, rshift_10, id=352, pos=[(0,110,20)])
}

fn __masc__aes_sbox_inv(input: bits[8]) -> bits[8] {
  literal.354: bits[8] = literal(value=82, id=354, pos=[(0,219,11)])
  literal.355: bits[8] = literal(value=9, id=355, pos=[(0,219,20)])
  literal.356: bits[8] = literal(value=106, id=356, pos=[(0,219,29)])
  literal.357: bits[8] = literal(value=213, id=357, pos=[(0,219,38)])
  literal.358: bits[8] = literal(value=48, id=358, pos=[(0,219,47)])
  literal.359: bits[8] = literal(value=54, id=359, pos=[(0,219,56)])
  literal.360: bits[8] = literal(value=165, id=360, pos=[(0,219,65)])
  literal.361: bits[8] = literal(value=56, id=361, pos=[(0,219,74)])
  literal.362: bits[8] = literal(value=191, id=362, pos=[(0,220,11)])
  literal.363: bits[8] = literal(value=64, id=363, pos=[(0,220,20)])
  literal.364: bits[8] = literal(value=163, id=364, pos=[(0,220,29)])
  literal.365: bits[8] = literal(value=158, id=365, pos=[(0,220,38)])
  literal.366: bits[8] = literal(value=129, id=366, pos=[(0,220,47)])
  literal.367: bits[8] = literal(value=243, id=367, pos=[(0,220,56)])
  literal.368: bits[8] = literal(value=215, id=368, pos=[(0,220,65)])
  literal.369: bits[8] = literal(value=251, id=369, pos=[(0,220,74)])
  literal.370: bits[8] = literal(value=124, id=370, pos=[(0,221,11)])
  literal.371: bits[8] = literal(value=227, id=371, pos=[(0,221,20)])
  literal.372: bits[8] = literal(value=57, id=372, pos=[(0,221,29)])
  literal.373: bits[8] = literal(value=130, id=373, pos=[(0,221,38)])
  literal.374: bits[8] = literal(value=155, id=374, pos=[(0,221,47)])
  literal.375: bits[8] = literal(value=47, id=375, pos=[(0,221,56)])
  literal.376: bits[8] = literal(value=255, id=376, pos=[(0,221,65)])
  literal.377: bits[8] = literal(value=135, id=377, pos=[(0,221,74)])
  literal.378: bits[8] = literal(value=52, id=378, pos=[(0,222,11)])
  literal.379: bits[8] = literal(value=142, id=379, pos=[(0,222,20)])
  literal.380: bits[8] = literal(value=67, id=380, pos=[(0,222,29)])
  literal.381: bits[8] = literal(value=68, id=381, pos=[(0,222,38)])
  literal.382: bits[8] = literal(value=196, id=382, pos=[(0,222,47)])
  literal.383: bits[8] = literal(value=222, id=383, pos=[(0,222,56)])
  literal.384: bits[8] = literal(value=233, id=384, pos=[(0,222,65)])
  literal.385: bits[8] = literal(value=203, id=385, pos=[(0,222,74)])
  literal.386: bits[8] = literal(value=84, id=386, pos=[(0,223,11)])
  literal.387: bits[8] = literal(value=123, id=387, pos=[(0,223,20)])
  literal.388: bits[8] = literal(value=148, id=388, pos=[(0,223,29)])
  literal.389: bits[8] = literal(value=50, id=389, pos=[(0,223,38)])
  literal.390: bits[8] = literal(value=166, id=390, pos=[(0,223,47)])
  literal.391: bits[8] = literal(value=194, id=391, pos=[(0,223,56)])
  literal.392: bits[8] = literal(value=35, id=392, pos=[(0,223,65)])
  literal.393: bits[8] = literal(value=61, id=393, pos=[(0,223,74)])
  literal.394: bits[8] = literal(value=238, id=394, pos=[(0,224,11)])
  literal.395: bits[8] = literal(value=76, id=395, pos=[(0,224,20)])
  literal.396: bits[8] = literal(value=149, id=396, pos=[(0,224,29)])
  literal.397: bits[8] = literal(value=11, id=397, pos=[(0,224,38)])
  literal.398: bits[8] = literal(value=66, id=398, pos=[(0,224,47)])
  literal.399: bits[8] = literal(value=250, id=399, pos=[(0,224,56)])
  literal.400: bits[8] = literal(value=195, id=400, pos=[(0,224,65)])
  literal.401: bits[8] = literal(value=78, id=401, pos=[(0,224,74)])
  literal.402: bits[8] = literal(value=8, id=402, pos=[(0,225,11)])
  literal.403: bits[8] = literal(value=46, id=403, pos=[(0,225,20)])
  literal.404: bits[8] = literal(value=161, id=404, pos=[(0,225,29)])
  literal.405: bits[8] = literal(value=102, id=405, pos=[(0,225,38)])
  literal.406: bits[8] = literal(value=40, id=406, pos=[(0,225,47)])
  literal.407: bits[8] = literal(value=217, id=407, pos=[(0,225,56)])
  literal.408: bits[8] = literal(value=36, id=408, pos=[(0,225,65)])
  literal.409: bits[8] = literal(value=178, id=409, pos=[(0,225,74)])
  literal.410: bits[8] = literal(value=118, id=410, pos=[(0,226,11)])
  literal.411: bits[8] = literal(value=91, id=411, pos=[(0,226,20)])
  literal.412: bits[8] = literal(value=162, id=412, pos=[(0,226,29)])
  literal.413: bits[8] = literal(value=73, id=413, pos=[(0,226,38)])
  literal.414: bits[8] = literal(value=109, id=414, pos=[(0,226,47)])
  literal.415: bits[8] = literal(value=139, id=415, pos=[(0,226,56)])
  literal.416: bits[8] = literal(value=209, id=416, pos=[(0,226,65)])
  literal.417: bits[8] = literal(value=37, id=417, pos=[(0,226,74)])
  literal.418: bits[8] = literal(value=114, id=418, pos=[(0,227,11)])
  literal.419: bits[8] = literal(value=248, id=419, pos=[(0,227,20)])
  literal.420: bits[8] = literal(value=246, id=420, pos=[(0,227,29)])
  literal.421: bits[8] = literal(value=100, id=421, pos=[(0,227,38)])
  literal.422: bits[8] = literal(value=134, id=422, pos=[(0,227,47)])
  literal.423: bits[8] = literal(value=104, id=423, pos=[(0,227,56)])
  literal.424: bits[8] = literal(value=152, id=424, pos=[(0,227,65)])
  literal.425: bits[8] = literal(value=22, id=425, pos=[(0,227,74)])
  literal.426: bits[8] = literal(value=212, id=426, pos=[(0,228,11)])
  literal.427: bits[8] = literal(value=164, id=427, pos=[(0,228,20)])
  literal.428: bits[8] = literal(value=92, id=428, pos=[(0,228,29)])
  literal.429: bits[8] = literal(value=204, id=429, pos=[(0,228,38)])
  literal.430: bits[8] = literal(value=93, id=430, pos=[(0,228,47)])
  literal.431: bits[8] = literal(value=101, id=431, pos=[(0,228,56)])
  literal.432: bits[8] = literal(value=182, id=432, pos=[(0,228,65)])
  literal.433: bits[8] = literal(value=146, id=433, pos=[(0,228,74)])
  literal.434: bits[8] = literal(value=108, id=434, pos=[(0,229,11)])
  literal.435: bits[8] = literal(value=112, id=435, pos=[(0,229,20)])
  literal.436: bits[8] = literal(value=72, id=436, pos=[(0,229,29)])
  literal.437: bits[8] = literal(value=80, id=437, pos=[(0,229,38)])
  literal.438: bits[8] = literal(value=253, id=438, pos=[(0,229,47)])
  literal.439: bits[8] = literal(value=237, id=439, pos=[(0,229,56)])
  literal.440: bits[8] = literal(value=185, id=440, pos=[(0,229,65)])
  literal.441: bits[8] = literal(value=218, id=441, pos=[(0,229,74)])
  literal.442: bits[8] = literal(value=94, id=442, pos=[(0,230,11)])
  literal.443: bits[8] = literal(value=21, id=443, pos=[(0,230,20)])
  literal.444: bits[8] = literal(value=70, id=444, pos=[(0,230,29)])
  literal.445: bits[8] = literal(value=87, id=445, pos=[(0,230,38)])
  literal.446: bits[8] = literal(value=167, id=446, pos=[(0,230,47)])
  literal.447: bits[8] = literal(value=141, id=447, pos=[(0,230,56)])
  literal.448: bits[8] = literal(value=157, id=448, pos=[(0,230,65)])
  literal.449: bits[8] = literal(value=132, id=449, pos=[(0,230,74)])
  literal.450: bits[8] = literal(value=144, id=450, pos=[(0,231,11)])
  literal.451: bits[8] = literal(value=216, id=451, pos=[(0,231,20)])
  literal.452: bits[8] = literal(value=171, id=452, pos=[(0,231,29)])
  literal.453: bits[8] = literal(value=0, id=453, pos=[(0,231,38)])
  literal.454: bits[8] = literal(value=140, id=454, pos=[(0,231,47)])
  literal.455: bits[8] = literal(value=188, id=455, pos=[(0,231,56)])
  literal.456: bits[8] = literal(value=211, id=456, pos=[(0,231,65)])
  literal.457: bits[8] = literal(value=10, id=457, pos=[(0,231,74)])
  literal.458: bits[8] = literal(value=247, id=458, pos=[(0,232,11)])
  literal.459: bits[8] = literal(value=228, id=459, pos=[(0,232,20)])
  literal.460: bits[8] = literal(value=88, id=460, pos=[(0,232,29)])
  literal.461: bits[8] = literal(value=5, id=461, pos=[(0,232,38)])
  literal.462: bits[8] = literal(value=184, id=462, pos=[(0,232,47)])
  literal.463: bits[8] = literal(value=179, id=463, pos=[(0,232,56)])
  literal.464: bits[8] = literal(value=69, id=464, pos=[(0,232,65)])
  literal.465: bits[8] = literal(value=6, id=465, pos=[(0,232,74)])
  literal.466: bits[8] = literal(value=208, id=466, pos=[(0,233,11)])
  literal.467: bits[8] = literal(value=44, id=467, pos=[(0,233,20)])
  literal.468: bits[8] = literal(value=30, id=468, pos=[(0,233,29)])
  literal.469: bits[8] = literal(value=143, id=469, pos=[(0,233,38)])
  literal.470: bits[8] = literal(value=202, id=470, pos=[(0,233,47)])
  literal.471: bits[8] = literal(value=63, id=471, pos=[(0,233,56)])
  literal.472: bits[8] = literal(value=15, id=472, pos=[(0,233,65)])
  literal.473: bits[8] = literal(value=2, id=473, pos=[(0,233,74)])
  literal.474: bits[8] = literal(value=193, id=474, pos=[(0,234,11)])
  literal.475: bits[8] = literal(value=175, id=475, pos=[(0,234,20)])
  literal.476: bits[8] = literal(value=189, id=476, pos=[(0,234,29)])
  literal.477: bits[8] = literal(value=3, id=477, pos=[(0,234,38)])
  literal.478: bits[8] = literal(value=1, id=478, pos=[(0,234,47)])
  literal.479: bits[8] = literal(value=19, id=479, pos=[(0,234,56)])
  literal.480: bits[8] = literal(value=138, id=480, pos=[(0,234,65)])
  literal.481: bits[8] = literal(value=107, id=481, pos=[(0,234,74)])
  literal.482: bits[8] = literal(value=58, id=482, pos=[(0,235,11)])
  literal.483: bits[8] = literal(value=145, id=483, pos=[(0,235,20)])
  literal.484: bits[8] = literal(value=17, id=484, pos=[(0,235,29)])
  literal.485: bits[8] = literal(value=65, id=485, pos=[(0,235,38)])
  literal.486: bits[8] = literal(value=79, id=486, pos=[(0,235,47)])
  literal.487: bits[8] = literal(value=103, id=487, pos=[(0,235,56)])
  literal.488: bits[8] = literal(value=220, id=488, pos=[(0,235,65)])
  literal.489: bits[8] = literal(value=234, id=489, pos=[(0,235,74)])
  literal.490: bits[8] = literal(value=151, id=490, pos=[(0,236,11)])
  literal.491: bits[8] = literal(value=242, id=491, pos=[(0,236,20)])
  literal.492: bits[8] = literal(value=207, id=492, pos=[(0,236,29)])
  literal.493: bits[8] = literal(value=206, id=493, pos=[(0,236,38)])
  literal.494: bits[8] = literal(value=240, id=494, pos=[(0,236,47)])
  literal.495: bits[8] = literal(value=180, id=495, pos=[(0,236,56)])
  literal.496: bits[8] = literal(value=230, id=496, pos=[(0,236,65)])
  literal.497: bits[8] = literal(value=115, id=497, pos=[(0,236,74)])
  literal.498: bits[8] = literal(value=150, id=498, pos=[(0,237,11)])
  literal.499: bits[8] = literal(value=172, id=499, pos=[(0,237,20)])
  literal.500: bits[8] = literal(value=116, id=500, pos=[(0,237,29)])
  literal.501: bits[8] = literal(value=34, id=501, pos=[(0,237,38)])
  literal.502: bits[8] = literal(value=231, id=502, pos=[(0,237,47)])
  literal.503: bits[8] = literal(value=173, id=503, pos=[(0,237,56)])
  literal.504: bits[8] = literal(value=53, id=504, pos=[(0,237,65)])
  literal.505: bits[8] = literal(value=133, id=505, pos=[(0,237,74)])
  literal.506: bits[8] = literal(value=226, id=506, pos=[(0,238,11)])
  literal.507: bits[8] = literal(value=249, id=507, pos=[(0,238,20)])
  literal.508: bits[8] = literal(value=55, id=508, pos=[(0,238,29)])
  literal.509: bits[8] = literal(value=232, id=509, pos=[(0,238,38)])
  literal.510: bits[8] = literal(value=28, id=510, pos=[(0,238,47)])
  literal.511: bits[8] = literal(value=117, id=511, pos=[(0,238,56)])
  literal.512: bits[8] = literal(value=223, id=512, pos=[(0,238,65)])
  literal.513: bits[8] = literal(value=110, id=513, pos=[(0,238,74)])
  literal.514: bits[8] = literal(value=71, id=514, pos=[(0,239,11)])
  literal.515: bits[8] = literal(value=241, id=515, pos=[(0,239,20)])
  literal.516: bits[8] = literal(value=26, id=516, pos=[(0,239,29)])
  literal.517: bits[8] = literal(value=113, id=517, pos=[(0,239,38)])
  literal.518: bits[8] = literal(value=29, id=518, pos=[(0,239,47)])
  literal.519: bits[8] = literal(value=41, id=519, pos=[(0,239,56)])
  literal.520: bits[8] = literal(value=197, id=520, pos=[(0,239,65)])
  literal.521: bits[8] = literal(value=137, id=521, pos=[(0,239,74)])
  literal.522: bits[8] = literal(value=111, id=522, pos=[(0,240,11)])
  literal.523: bits[8] = literal(value=183, id=523, pos=[(0,240,20)])
  literal.524: bits[8] = literal(value=98, id=524, pos=[(0,240,29)])
  literal.525: bits[8] = literal(value=14, id=525, pos=[(0,240,38)])
  literal.526: bits[8] = literal(value=170, id=526, pos=[(0,240,47)])
  literal.527: bits[8] = literal(value=24, id=527, pos=[(0,240,56)])
  literal.528: bits[8] = literal(value=190, id=528, pos=[(0,240,65)])
  literal.529: bits[8] = literal(value=27, id=529, pos=[(0,240,74)])
  literal.530: bits[8] = literal(value=252, id=530, pos=[(0,241,11)])
  literal.531: bits[8] = literal(value=86, id=531, pos=[(0,241,20)])
  literal.532: bits[8] = literal(value=62, id=532, pos=[(0,241,29)])
  literal.533: bits[8] = literal(value=75, id=533, pos=[(0,241,38)])
  literal.534: bits[8] = literal(value=198, id=534, pos=[(0,241,47)])
  literal.535: bits[8] = literal(value=210, id=535, pos=[(0,241,56)])
  literal.536: bits[8] = literal(value=121, id=536, pos=[(0,241,65)])
  literal.537: bits[8] = literal(value=32, id=537, pos=[(0,241,74)])
  literal.538: bits[8] = literal(value=154, id=538, pos=[(0,242,11)])
  literal.539: bits[8] = literal(value=219, id=539, pos=[(0,242,20)])
  literal.540: bits[8] = literal(value=192, id=540, pos=[(0,242,29)])
  literal.541: bits[8] = literal(value=254, id=541, pos=[(0,242,38)])
  literal.542: bits[8] = literal(value=120, id=542, pos=[(0,242,47)])
  literal.543: bits[8] = literal(value=205, id=543, pos=[(0,242,56)])
  literal.544: bits[8] = literal(value=90, id=544, pos=[(0,242,65)])
  literal.545: bits[8] = literal(value=244, id=545, pos=[(0,242,74)])
  literal.546: bits[8] = literal(value=31, id=546, pos=[(0,243,11)])
  literal.547: bits[8] = literal(value=221, id=547, pos=[(0,243,20)])
  literal.548: bits[8] = literal(value=168, id=548, pos=[(0,243,29)])
  literal.549: bits[8] = literal(value=51, id=549, pos=[(0,243,38)])
  literal.550: bits[8] = literal(value=136, id=550, pos=[(0,243,47)])
  literal.551: bits[8] = literal(value=7, id=551, pos=[(0,243,56)])
  literal.552: bits[8] = literal(value=199, id=552, pos=[(0,243,65)])
  literal.553: bits[8] = literal(value=49, id=553, pos=[(0,243,74)])
  literal.554: bits[8] = literal(value=177, id=554, pos=[(0,244,11)])
  literal.555: bits[8] = literal(value=18, id=555, pos=[(0,244,20)])
  literal.556: bits[8] = literal(value=16, id=556, pos=[(0,244,29)])
  literal.557: bits[8] = literal(value=89, id=557, pos=[(0,244,38)])
  literal.558: bits[8] = literal(value=39, id=558, pos=[(0,244,47)])
  literal.559: bits[8] = literal(value=128, id=559, pos=[(0,244,56)])
  literal.560: bits[8] = literal(value=236, id=560, pos=[(0,244,65)])
  literal.561: bits[8] = literal(value=95, id=561, pos=[(0,244,74)])
  literal.562: bits[8] = literal(value=96, id=562, pos=[(0,245,11)])
  literal.563: bits[8] = literal(value=81, id=563, pos=[(0,245,20)])
  literal.564: bits[8] = literal(value=127, id=564, pos=[(0,245,29)])
  literal.565: bits[8] = literal(value=169, id=565, pos=[(0,245,38)])
  literal.566: bits[8] = literal(value=25, id=566, pos=[(0,245,47)])
  literal.567: bits[8] = literal(value=181, id=567, pos=[(0,245,56)])
  literal.568: bits[8] = literal(value=74, id=568, pos=[(0,245,65)])
  literal.569: bits[8] = literal(value=13, id=569, pos=[(0,245,74)])
  literal.570: bits[8] = literal(value=45, id=570, pos=[(0,246,11)])
  literal.571: bits[8] = literal(value=229, id=571, pos=[(0,246,20)])
  literal.572: bits[8] = literal(value=122, id=572, pos=[(0,246,29)])
  literal.573: bits[8] = literal(value=159, id=573, pos=[(0,246,38)])
  literal.574: bits[8] = literal(value=147, id=574, pos=[(0,246,47)])
  literal.575: bits[8] = literal(value=201, id=575, pos=[(0,246,56)])
  literal.576: bits[8] = literal(value=156, id=576, pos=[(0,246,65)])
  literal.577: bits[8] = literal(value=239, id=577, pos=[(0,246,74)])
  literal.578: bits[8] = literal(value=160, id=578, pos=[(0,247,11)])
  literal.579: bits[8] = literal(value=224, id=579, pos=[(0,247,20)])
  literal.580: bits[8] = literal(value=59, id=580, pos=[(0,247,29)])
  literal.581: bits[8] = literal(value=77, id=581, pos=[(0,247,38)])
  literal.582: bits[8] = literal(value=174, id=582, pos=[(0,247,47)])
  literal.583: bits[8] = literal(value=42, id=583, pos=[(0,247,56)])
  literal.584: bits[8] = literal(value=245, id=584, pos=[(0,247,65)])
  literal.585: bits[8] = literal(value=176, id=585, pos=[(0,247,74)])
  literal.586: bits[8] = literal(value=200, id=586, pos=[(0,248,11)])
  literal.587: bits[8] = literal(value=235, id=587, pos=[(0,248,20)])
  literal.588: bits[8] = literal(value=187, id=588, pos=[(0,248,29)])
  literal.589: bits[8] = literal(value=60, id=589, pos=[(0,248,38)])
  literal.590: bits[8] = literal(value=131, id=590, pos=[(0,248,47)])
  literal.591: bits[8] = literal(value=83, id=591, pos=[(0,248,56)])
  literal.592: bits[8] = literal(value=153, id=592, pos=[(0,248,65)])
  literal.593: bits[8] = literal(value=97, id=593, pos=[(0,248,74)])
  literal.594: bits[8] = literal(value=23, id=594, pos=[(0,249,11)])
  literal.595: bits[8] = literal(value=43, id=595, pos=[(0,249,20)])
  literal.596: bits[8] = literal(value=4, id=596, pos=[(0,249,29)])
  literal.597: bits[8] = literal(value=126, id=597, pos=[(0,249,38)])
  literal.598: bits[8] = literal(value=186, id=598, pos=[(0,249,47)])
  literal.599: bits[8] = literal(value=119, id=599, pos=[(0,249,56)])
  literal.600: bits[8] = literal(value=214, id=600, pos=[(0,249,65)])
  literal.601: bits[8] = literal(value=38, id=601, pos=[(0,249,74)])
  literal.602: bits[8] = literal(value=225, id=602, pos=[(0,250,11)])
  literal.603: bits[8] = literal(value=105, id=603, pos=[(0,250,20)])
  literal.604: bits[8] = literal(value=20, id=604, pos=[(0,250,29)])
  literal.605: bits[8] = literal(value=99, id=605, pos=[(0,250,38)])
  literal.606: bits[8] = literal(value=85, id=606, pos=[(0,250,47)])
  literal.607: bits[8] = literal(value=33, id=607, pos=[(0,250,56)])
  literal.608: bits[8] = literal(value=12, id=608, pos=[(0,250,65)])
  literal.609: bits[8] = literal(value=125, id=609, pos=[(0,250,74)])
  inv_sbox: bits[8][256] = array(literal.354, literal.355, literal.356, literal.357, literal.358, literal.359, literal.360, literal.361, literal.362, literal.363, literal.364, literal.365, literal.366, literal.367, literal.368, literal.369, literal.370, literal.371, literal.372, literal.373, literal.374, literal.375, literal.376, literal.377, literal.378, literal.379, literal.380, literal.381, literal.382, literal.383, literal.384, literal.385, literal.386, literal.387, literal.388, literal.389, literal.390, literal.391, literal.392, literal.393, literal.394, literal.395, literal.396, literal.397, literal.398, literal.399, literal.400, literal.401, literal.402, literal.403, literal.404, literal.405, literal.406, literal.407, literal.408, literal.409, literal.410, literal.411, literal.412, literal.413, literal.414, literal.415, literal.416, literal.417, literal.418, literal.419, literal.420, literal.421, literal.422, literal.423, literal.424, literal.425, literal.426, literal.427, literal.428, literal.429, literal.430, literal.431, literal.432, literal.433, literal.434, literal.435, literal.436, literal.437, literal.438, literal.439, literal.440, literal.441, literal.442, literal.443, literal.444, literal.445, literal.446, literal.447, literal.448, literal.449, literal.450, literal.451, literal.452, literal.453, literal.454, literal.455, literal.456, literal.457, literal.458, literal.459, literal.460, literal.461, literal.462, literal.463, literal.464, literal.465, literal.466, literal.467, literal.468, literal.469, literal.470, literal.471, literal.472, literal.473, literal.474, literal.475, literal.476, literal.477, literal.478, literal.479, literal.480, literal.481, literal.482, literal.483, literal.484, literal.485, literal.486, literal.487, literal.488, literal.489, literal.490, literal.491, literal.492, literal.493, literal.494, literal.495, literal.496, literal.497, literal.498, literal.499, literal.500, literal.501, literal.502, literal.503, literal.504, literal.505, literal.506, literal.507, literal.508, literal.509, literal.510, literal.511, literal.512, literal.513, literal.514, literal.515, literal.516, literal.517, literal.518, literal.519, literal.520, literal.521, literal.522, literal.523, literal.524, literal.525, literal.526, literal.527, literal.528, literal.529, literal.530, literal.531, literal.532, literal.533, literal.534, literal.535, literal.536, literal.537, literal.538, literal.539, literal.540, literal.541, literal.542, literal.543, literal.544, literal.545, literal.546, literal.547, literal.548, literal.549, literal.550, literal.551, literal.552, literal.553, literal.554, literal.555, literal.556, literal.557, literal.558, literal.559, literal.560, literal.561, literal.562, literal.563, literal.564, literal.565, literal.566, literal.567, literal.568, literal.569, literal.570, literal.571, literal.572, literal.573, literal.574, literal.575, literal.576, literal.577, literal.578, literal.579, literal.580, literal.581, literal.582, literal.583, literal.584, literal.585, literal.586, literal.587, literal.588, literal.589, literal.590, literal.591, literal.592, literal.593, literal.594, literal.595, literal.596, literal.597, literal.598, literal.599, literal.600, literal.601, literal.602, literal.603, literal.604, literal.605, literal.606, literal.607, literal.608, literal.609, id=610, pos=[(0,218,28)])
  ret array_index.611: bits[8] = array_index(inv_sbox, indices=[input], id=611, pos=[(0,254,12)])
}

fn __masc__aes32dsi(bs: bits[8], rs2: bits[32], rs1: bits[32]) -> bits[32] {
  literal.615: bits[2] = literal(value=3, id=615, pos=[(0,259,27)])
  shll.616: bits[8] = shll(bs, literal.615, id=616, pos=[(0,259,24)])
  literal.617: bits[8] = literal(value=31, id=617, pos=[(0,259,35)])
  shamt: bits[8] = and(shll.616, literal.617, id=618, pos=[(0,259,30)])
  shrl.619: bits[32] = shrl(rs2, shamt, id=619, pos=[(0,260,23)])
  literal.620: bits[32] = literal(value=255, id=620, pos=[(0,260,39)])
  and.621: bits[32] = and(shrl.619, literal.620, id=621, pos=[(0,260,33)])
  si: bits[8] = bit_slice(and.621, start=0, width=8, id=622)
  sbox_inv_val: bits[8] = invoke(si, to_apply=__masc__aes_sbox_inv, id=623, pos=[(0,263,39)])
  so: bits[32] = zero_ext(sbox_inv_val, new_bit_count=32, id=624)
  zero_ext.625: bits[32] = zero_ext(shamt, new_bit_count=32, id=625)
  invoke.626: bits[32] = invoke(so, zero_ext.625, to_apply=__masc__rol, id=626, pos=[(0,266,31)])
  ret result: bits[32] = xor(rs1, invoke.626, id=627, pos=[(0,266,26)])
}

fn __masc__aes_xtime(a: bits[8]) -> bits[8] {
  literal.631: bits[8] = literal(value=128, id=631, pos=[(0,273,40)])
  and.632: bits[8] = and(a, literal.631, id=632, pos=[(0,273,35)])
  literal.633: bits[8] = literal(value=0, id=633, pos=[(0,273,51)])
  literal.629: bits[1] = literal(value=1, id=629, pos=[(0,272,28)])
  ne.634: bits[1] = ne(and.632, literal.633, id=634, pos=[(0,273,45)])
  literal.636: bits[8] = literal(value=0, id=636, pos=[(0,273,75)])
  literal.635: bits[8] = literal(value=27, id=635, pos=[(0,273,58)])
  xshifted: bits[8] = shll(a, literal.629, id=630, pos=[(0,272,25)])
  conditional_xor: bits[8] = sel(ne.634, cases=[literal.636, literal.635], id=637, pos=[(0,273,30)])
  ret xor.638: bits[8] = xor(xshifted, conditional_xor, id=638, pos=[(0,274,13)])
}

fn __masc__gmul(a: bits[8], b: bits[8]) -> bits[8] {
  literal.641: bits[8] = literal(value=1, id=641, pos=[(0,278,31)])
  literal.647: bits[8] = literal(value=2, id=647, pos=[(0,279,31)])
  and.642: bits[8] = and(b, literal.641, id=642, pos=[(0,278,26)])
  literal.643: bits[8] = literal(value=0, id=643, pos=[(0,278,41)])
  and.648: bits[8] = and(b, literal.647, id=648, pos=[(0,279,26)])
  literal.649: bits[8] = literal(value=0, id=649, pos=[(0,279,41)])
  literal.654: bits[8] = literal(value=4, id=654, pos=[(0,280,31)])
  ne.644: bits[1] = ne(and.642, literal.643, id=644, pos=[(0,278,35)])
  literal.645: bits[8] = literal(value=0, id=645, pos=[(0,278,59)])
  ne.650: bits[1] = ne(and.648, literal.649, id=650, pos=[(0,279,35)])
  literal.652: bits[8] = literal(value=0, id=652, pos=[(0,279,70)])
  invoke.651: bits[8] = invoke(a, to_apply=__masc__aes_xtime, id=651, pos=[(0,279,54)])
  and.655: bits[8] = and(b, literal.654, id=655, pos=[(0,280,26)])
  literal.656: bits[8] = literal(value=0, id=656, pos=[(0,280,41)])
  invoke.658: bits[8] = invoke(a, to_apply=__masc__aes_xtime, id=658, pos=[(0,280,64)])
  literal.662: bits[8] = literal(value=8, id=662, pos=[(0,281,31)])
  invoke.666: bits[8] = invoke(a, to_apply=__masc__aes_xtime, id=666, pos=[(0,281,74)])
  term_1: bits[8] = sel(ne.644, cases=[literal.645, a], id=646, pos=[(0,278,21)])
  term_2: bits[8] = sel(ne.650, cases=[literal.652, invoke.651], id=653, pos=[(0,279,21)])
  ne.657: bits[1] = ne(and.655, literal.656, id=657, pos=[(0,280,35)])
  literal.660: bits[8] = literal(value=0, id=660, pos=[(0,280,81)])
  invoke.659: bits[8] = invoke(invoke.658, to_apply=__masc__aes_xtime, id=659, pos=[(0,280,54)])
  and.663: bits[8] = and(b, literal.662, id=663, pos=[(0,281,26)])
  literal.664: bits[8] = literal(value=0, id=664, pos=[(0,281,41)])
  invoke.667: bits[8] = invoke(invoke.666, to_apply=__masc__aes_xtime, id=667, pos=[(0,281,64)])
  xor.671: bits[8] = xor(term_1, term_2, id=671, pos=[(0,283,12)])
  term_3: bits[8] = sel(ne.657, cases=[literal.660, invoke.659], id=661, pos=[(0,280,21)])
  ne.665: bits[1] = ne(and.663, literal.664, id=665, pos=[(0,281,35)])
  literal.669: bits[8] = literal(value=0, id=669, pos=[(0,281,92)])
  invoke.668: bits[8] = invoke(invoke.667, to_apply=__masc__aes_xtime, id=668, pos=[(0,281,54)])
  xor.672: bits[8] = xor(xor.671, term_3, id=672, pos=[(0,283,21)])
  term_4: bits[8] = sel(ne.665, cases=[literal.669, invoke.668], id=670, pos=[(0,281,21)])
  xor.673: bits[8] = xor(xor.672, term_4, id=673, pos=[(0,283,30)])
  literal.674: bits[8] = literal(value=255, id=674, pos=[(0,283,45)])
  ret and.675: bits[8] = and(xor.673, literal.674, id=675, pos=[(0,283,40)])
}

fn __masc__aes_mixcolumn_byte_inv(byte: bits[8]) -> bits[32] {
  literal.677: bits[8] = literal(value=11, id=677, pos=[(0,288,39)])
  literal.682: bits[8] = literal(value=13, id=682, pos=[(0,289,39)])
  invoke.678: bits[8] = invoke(byte, literal.677, to_apply=__masc__gmul, id=678, pos=[(0,288,29)])
  invoke.683: bits[8] = invoke(byte, literal.682, to_apply=__masc__gmul, id=683, pos=[(0,289,29)])
  literal.687: bits[8] = literal(value=9, id=687, pos=[(0,290,39)])
  zero_ext.679: bits[32] = zero_ext(invoke.678, new_bit_count=32, id=679)
  literal.680: bits[5] = literal(value=24, id=680, pos=[(0,288,56)])
  zero_ext.684: bits[32] = zero_ext(invoke.683, new_bit_count=32, id=684)
  literal.685: bits[5] = literal(value=16, id=685, pos=[(0,289,56)])
  invoke.688: bits[8] = invoke(byte, literal.687, to_apply=__masc__gmul, id=688, pos=[(0,290,29)])
  result_1: bits[32] = shll(zero_ext.679, literal.680, id=681, pos=[(0,288,53)])
  result_2: bits[32] = shll(zero_ext.684, literal.685, id=686, pos=[(0,289,53)])
  zero_ext.689: bits[32] = zero_ext(invoke.688, new_bit_count=32, id=689)
  literal.690: bits[4] = literal(value=8, id=690, pos=[(0,290,56)])
  literal.692: bits[8] = literal(value=14, id=692, pos=[(0,291,38)])
  or.695: bits[32] = or(result_1, result_2, id=695, pos=[(0,293,13)])
  result_3: bits[32] = shll(zero_ext.689, literal.690, id=691, pos=[(0,290,53)])
  invoke.693: bits[8] = invoke(byte, literal.692, to_apply=__masc__gmul, id=693, pos=[(0,291,28)])
  or.696: bits[32] = or(or.695, result_3, id=696, pos=[(0,293,24)])
  result_4: bits[32] = zero_ext(invoke.693, new_bit_count=32, id=694)
  ret or.697: bits[32] = or(or.696, result_4, id=697, pos=[(0,293,35)])
}

fn __masc__aes32dsmi(bs: bits[8], rs2: bits[32], rs1: bits[32]) -> bits[32] {
  literal.701: bits[2] = literal(value=3, id=701, pos=[(0,298,27)])
  shamt: bits[8] = shll(bs, literal.701, id=702, pos=[(0,298,24)])
  shrl.703: bits[32] = shrl(rs2, shamt, id=703, pos=[(0,299,22)])
  si: bits[8] = bit_slice(shrl.703, start=0, width=8, id=704)
  so: bits[8] = invoke(si, to_apply=__masc__aes_sbox_inv, id=705, pos=[(0,300,30)])
  mixed: bits[32] = invoke(so, to_apply=__masc__aes_mixcolumn_byte_inv, id=706, pos=[(0,301,43)])
  zero_ext.707: bits[32] = zero_ext(shamt, new_bit_count=32, id=707)
  invoke.708: bits[32] = invoke(mixed, zero_ext.707, to_apply=__masc__rol, id=708, pos=[(0,302,31)])
  ret result: bits[32] = xor(rs1, invoke.708, id=709, pos=[(0,302,26)])
}

top fn __masc__execute(instruction: bits[32], rs1: bits[32], rs2: bits[32], bs: bits[8], valid: bits[1]) -> (bits[1], bits[32]) {
  literal.834: bits[32] = literal(value=23, id=834, pos=[(0,365,17)])
  literal.829: bits[32] = literal(value=22, id=829, pos=[(0,364,17)])
  literal.824: bits[32] = literal(value=21, id=824, pos=[(0,363,17)])
  literal.819: bits[32] = literal(value=20, id=819, pos=[(0,362,17)])
  literal.814: bits[32] = literal(value=19, id=814, pos=[(0,361,17)])
  literal.809: bits[32] = literal(value=18, id=809, pos=[(0,360,17)])
  literal.804: bits[32] = literal(value=17, id=804, pos=[(0,359,17)])
  literal.799: bits[32] = literal(value=16, id=799, pos=[(0,358,17)])
  literal.794: bits[32] = literal(value=15, id=794, pos=[(0,357,17)])
  literal.789: bits[32] = literal(value=14, id=789, pos=[(0,356,17)])
  literal.784: bits[32] = literal(value=13, id=784, pos=[(0,355,17)])
  literal.779: bits[32] = literal(value=12, id=779, pos=[(0,354,17)])
  literal.774: bits[32] = literal(value=11, id=774, pos=[(0,353,17)])
  literal.769: bits[32] = literal(value=10, id=769, pos=[(0,352,17)])
  literal.764: bits[32] = literal(value=9, id=764, pos=[(0,351,17)])
  literal.759: bits[32] = literal(value=8, id=759, pos=[(0,350,17)])
  literal.754: bits[32] = literal(value=7, id=754, pos=[(0,349,17)])
  literal.749: bits[32] = literal(value=6, id=749, pos=[(0,348,17)])
  literal.744: bits[32] = literal(value=5, id=744, pos=[(0,347,17)])
  literal.739: bits[32] = literal(value=4, id=739, pos=[(0,346,17)])
  literal.734: bits[32] = literal(value=3, id=734, pos=[(0,345,17)])
  literal.729: bits[32] = literal(value=2, id=729, pos=[(0,344,17)])
  literal.724: bits[32] = literal(value=1, id=724, pos=[(0,343,17)])
  literal.719: bits[32] = literal(value=0, id=719, pos=[(0,342,17)])
  eq.835: bits[1] = eq(literal.834, instruction, id=835)
  eq.830: bits[1] = eq(literal.829, instruction, id=830)
  eq.825: bits[1] = eq(literal.824, instruction, id=825)
  eq.820: bits[1] = eq(literal.819, instruction, id=820)
  eq.815: bits[1] = eq(literal.814, instruction, id=815)
  eq.810: bits[1] = eq(literal.809, instruction, id=810)
  eq.805: bits[1] = eq(literal.804, instruction, id=805)
  eq.800: bits[1] = eq(literal.799, instruction, id=800)
  eq.795: bits[1] = eq(literal.794, instruction, id=795)
  eq.790: bits[1] = eq(literal.789, instruction, id=790)
  eq.785: bits[1] = eq(literal.784, instruction, id=785)
  eq.780: bits[1] = eq(literal.779, instruction, id=780)
  eq.775: bits[1] = eq(literal.774, instruction, id=775)
  eq.770: bits[1] = eq(literal.769, instruction, id=770)
  eq.765: bits[1] = eq(literal.764, instruction, id=765)
  eq.760: bits[1] = eq(literal.759, instruction, id=760)
  eq.755: bits[1] = eq(literal.754, instruction, id=755)
  eq.750: bits[1] = eq(literal.749, instruction, id=750)
  eq.745: bits[1] = eq(literal.744, instruction, id=745)
  eq.740: bits[1] = eq(literal.739, instruction, id=740)
  eq.735: bits[1] = eq(literal.734, instruction, id=735)
  eq.730: bits[1] = eq(literal.729, instruction, id=730)
  eq.725: bits[1] = eq(literal.724, instruction, id=725)
  eq.720: bits[1] = eq(literal.719, instruction, id=720)
  concat.843: bits[24] = concat(eq.835, eq.830, eq.825, eq.820, eq.815, eq.810, eq.805, eq.800, eq.795, eq.790, eq.785, eq.780, eq.775, eq.770, eq.765, eq.760, eq.755, eq.750, eq.745, eq.740, eq.735, eq.730, eq.725, eq.720, id=843)
  literal.721: bits[1] = literal(value=1, id=721, pos=[(0,342,27)])
  invoke.722: bits[32] = invoke(rs1, rs2, to_apply=__masc__ror, id=722, pos=[(0,342,36)])
  literal.726: bits[1] = literal(value=1, id=726, pos=[(0,343,27)])
  invoke.727: bits[32] = invoke(rs1, rs2, to_apply=__masc__rol, id=727, pos=[(0,343,36)])
  literal.731: bits[1] = literal(value=1, id=731, pos=[(0,344,28)])
  invoke.732: bits[32] = invoke(rs1, rs2, to_apply=__masc__rori, id=732, pos=[(0,344,38)])
  literal.736: bits[1] = literal(value=1, id=736, pos=[(0,345,28)])
  invoke.737: bits[32] = invoke(rs1, rs2, to_apply=__masc__andn, id=737, pos=[(0,345,38)])
  literal.741: bits[1] = literal(value=1, id=741, pos=[(0,346,27)])
  invoke.742: bits[32] = invoke(rs1, rs2, to_apply=__masc__orn, id=742, pos=[(0,346,36)])
  literal.746: bits[1] = literal(value=1, id=746, pos=[(0,347,28)])
  invoke.747: bits[32] = invoke(rs1, rs2, to_apply=__masc__xnor, id=747, pos=[(0,347,38)])
  literal.751: bits[1] = literal(value=1, id=751, pos=[(0,348,28)])
  invoke.752: bits[32] = invoke(rs1, rs2, to_apply=__masc__pack, id=752, pos=[(0,348,38)])
  literal.756: bits[1] = literal(value=1, id=756, pos=[(0,349,29)])
  invoke.757: bits[32] = invoke(rs1, rs2, to_apply=__masc__packh, id=757, pos=[(0,349,40)])
  literal.761: bits[1] = literal(value=1, id=761, pos=[(0,350,29)])
  invoke.762: bits[32] = invoke(rs1, to_apply=__masc__brev8, id=762, pos=[(0,350,40)])
  literal.766: bits[1] = literal(value=1, id=766, pos=[(0,351,28)])
  invoke.767: bits[32] = invoke(rs1, to_apply=__masc__rev8, id=767, pos=[(0,351,38)])
  literal.771: bits[1] = literal(value=1, id=771, pos=[(0,352,27)])
  invoke.772: bits[32] = invoke(rs1, to_apply=__masc__zip, id=772, pos=[(0,352,36)])
  literal.776: bits[1] = literal(value=1, id=776, pos=[(0,353,29)])
  invoke.777: bits[32] = invoke(rs1, to_apply=__masc__unzip, id=777, pos=[(0,353,40)])
  literal.781: bits[1] = literal(value=1, id=781, pos=[(0,354,35)])
  invoke.782: bits[32] = invoke(rs1, rs2, to_apply=__masc__sha512sum0r, id=782, pos=[(0,354,52)])
  literal.786: bits[1] = literal(value=1, id=786, pos=[(0,355,34)])
  invoke.787: bits[32] = invoke(rs1, to_apply=__masc__sha256sum0, id=787, pos=[(0,355,50)])
  literal.791: bits[1] = literal(value=1, id=791, pos=[(0,356,35)])
  invoke.792: bits[32] = invoke(rs1, rs2, to_apply=__masc__sha512sig0l, id=792, pos=[(0,356,52)])
  literal.796: bits[1] = literal(value=1, id=796, pos=[(0,357,34)])
  invoke.797: bits[32] = invoke(rs1, to_apply=__masc__sha256sig0, id=797, pos=[(0,357,50)])
  literal.801: bits[1] = literal(value=1, id=801, pos=[(0,358,34)])
  invoke.802: bits[32] = invoke(rs1, to_apply=__masc__sha256sum1, id=802, pos=[(0,358,50)])
  literal.806: bits[1] = literal(value=1, id=806, pos=[(0,359,35)])
  invoke.807: bits[32] = invoke(rs1, rs2, to_apply=__masc__sha512sig1h, id=807, pos=[(0,359,52)])
  literal.811: bits[1] = literal(value=1, id=811, pos=[(0,360,35)])
  invoke.812: bits[32] = invoke(rs1, rs2, to_apply=__masc__sha512sig0h, id=812, pos=[(0,360,52)])
  literal.816: bits[1] = literal(value=1, id=816, pos=[(0,361,35)])
  invoke.817: bits[32] = invoke(rs1, rs2, to_apply=__masc__sha512sig1l, id=817, pos=[(0,361,52)])
  literal.821: bits[1] = literal(value=1, id=821, pos=[(0,362,35)])
  invoke.822: bits[32] = invoke(rs1, rs2, to_apply=__masc__SHA512SUM1R, id=822, pos=[(0,362,52)])
  literal.826: bits[1] = literal(value=1, id=826, pos=[(0,363,34)])
  invoke.827: bits[32] = invoke(rs1, to_apply=__masc__sha256sig1, id=827, pos=[(0,363,50)])
  literal.831: bits[1] = literal(value=1, id=831, pos=[(0,364,32)])
  invoke.832: bits[32] = invoke(bs, rs2, rs1, to_apply=__masc__aes32dsi, id=832, pos=[(0,364,46)])
  literal.836: bits[1] = literal(value=1, id=836, pos=[(0,365,33)])
  invoke.837: bits[32] = invoke(bs, rs2, rs1, to_apply=__masc__aes32dsmi, id=837, pos=[(0,365,48)])
  literal.840: bits[1] = literal(value=0, id=840, pos=[(0,366,12)])
  literal.841: bits[32] = literal(value=0, id=841, pos=[(0,366,23)])
  one_hot.844: bits[25] = one_hot(concat.843, lsb_prio=true, id=844)
  tuple.723: (bits[1], bits[32]) = tuple(literal.721, invoke.722, id=723, pos=[(0,342,26)])
  tuple.728: (bits[1], bits[32]) = tuple(literal.726, invoke.727, id=728, pos=[(0,343,26)])
  tuple.733: (bits[1], bits[32]) = tuple(literal.731, invoke.732, id=733, pos=[(0,344,27)])
  tuple.738: (bits[1], bits[32]) = tuple(literal.736, invoke.737, id=738, pos=[(0,345,27)])
  tuple.743: (bits[1], bits[32]) = tuple(literal.741, invoke.742, id=743, pos=[(0,346,26)])
  tuple.748: (bits[1], bits[32]) = tuple(literal.746, invoke.747, id=748, pos=[(0,347,27)])
  tuple.753: (bits[1], bits[32]) = tuple(literal.751, invoke.752, id=753, pos=[(0,348,27)])
  tuple.758: (bits[1], bits[32]) = tuple(literal.756, invoke.757, id=758, pos=[(0,349,28)])
  tuple.763: (bits[1], bits[32]) = tuple(literal.761, invoke.762, id=763, pos=[(0,350,28)])
  tuple.768: (bits[1], bits[32]) = tuple(literal.766, invoke.767, id=768, pos=[(0,351,27)])
  tuple.773: (bits[1], bits[32]) = tuple(literal.771, invoke.772, id=773, pos=[(0,352,26)])
  tuple.778: (bits[1], bits[32]) = tuple(literal.776, invoke.777, id=778, pos=[(0,353,28)])
  tuple.783: (bits[1], bits[32]) = tuple(literal.781, invoke.782, id=783, pos=[(0,354,34)])
  tuple.788: (bits[1], bits[32]) = tuple(literal.786, invoke.787, id=788, pos=[(0,355,33)])
  tuple.793: (bits[1], bits[32]) = tuple(literal.791, invoke.792, id=793, pos=[(0,356,34)])
  tuple.798: (bits[1], bits[32]) = tuple(literal.796, invoke.797, id=798, pos=[(0,357,33)])
  tuple.803: (bits[1], bits[32]) = tuple(literal.801, invoke.802, id=803, pos=[(0,358,33)])
  tuple.808: (bits[1], bits[32]) = tuple(literal.806, invoke.807, id=808, pos=[(0,359,34)])
  tuple.813: (bits[1], bits[32]) = tuple(literal.811, invoke.812, id=813, pos=[(0,360,34)])
  tuple.818: (bits[1], bits[32]) = tuple(literal.816, invoke.817, id=818, pos=[(0,361,34)])
  tuple.823: (bits[1], bits[32]) = tuple(literal.821, invoke.822, id=823, pos=[(0,362,34)])
  tuple.828: (bits[1], bits[32]) = tuple(literal.826, invoke.827, id=828, pos=[(0,363,33)])
  tuple.833: (bits[1], bits[32]) = tuple(literal.831, invoke.832, id=833, pos=[(0,364,31)])
  tuple.838: (bits[1], bits[32]) = tuple(literal.836, invoke.837, id=838, pos=[(0,365,32)])
  tuple.842: (bits[1], bits[32]) = tuple(literal.840, literal.841, id=842, pos=[(0,366,11)])
  literal.716: bits[1] = literal(value=0, id=716, pos=[(0,339,5)])
  literal.717: bits[32] = literal(value=0, id=717, pos=[(0,339,16)])
  not.715: bits[1] = not(valid, id=715, pos=[(0,338,5)])
  one_hot_sel.845: (bits[1], bits[32]) = one_hot_sel(one_hot.844, cases=[tuple.723, tuple.728, tuple.733, tuple.738, tuple.743, tuple.748, tuple.753, tuple.758, tuple.763, tuple.768, tuple.773, tuple.778, tuple.783, tuple.788, tuple.793, tuple.798, tuple.803, tuple.808, tuple.813, tuple.818, tuple.823, tuple.828, tuple.833, tuple.838, tuple.842], id=845)
  tuple.718: (bits[1], bits[32]) = tuple(literal.716, literal.717, id=718, pos=[(0,339,4)])
  literal.839: bits[1] = literal(value=1, id=839, pos=[(0,366,6)])
  ret sel.846: (bits[1], bits[32]) = sel(not.715, cases=[one_hot_sel.845, tuple.718], id=846, pos=[(0,338,2)])
}
