package masc

file_number 0 "/home/mark/efabless_2023/caravel_template/AI_generated/top_level/masc.x"

fn __masc__ror(rs1: bits[32], rs2: bits[32]) -> bits[32] {
  literal.3: bits[32] = literal(value=31, id=3, pos=[(0,3,38)])
  literal.6: bits[32] = literal(value=32, id=6, pos=[(0,4,41)])
  shift_amount: bits[32] = and(rs2, literal.3, id=4, pos=[(0,3,32)])
  sub.7: bits[32] = sub(literal.6, shift_amount, id=7, pos=[(0,4,44)])
  shrl.5: bits[32] = shrl(rs1, shift_amount, id=5, pos=[(0,4,9)])
  shll.8: bits[32] = shll(rs1, sub.7, id=8, pos=[(0,4,33)])
  ret or.9: bits[32] = or(shrl.5, shll.8, id=9, pos=[(0,4,26)])
}

fn __masc__rol(rs1: bits[32], rs2: bits[32]) -> bits[32] {
  literal.12: bits[32] = literal(value=31, id=12, pos=[(0,8,31)])
  literal.15: bits[32] = literal(value=32, id=15, pos=[(0,9,34)])
  shamt: bits[32] = and(rs2, literal.12, id=13, pos=[(0,8,25)])
  sub.16: bits[32] = sub(literal.15, shamt, id=16, pos=[(0,9,37)])
  shll.14: bits[32] = shll(rs1, shamt, id=14, pos=[(0,9,9)])
  shrl.17: bits[32] = shrl(rs1, sub.16, id=17, pos=[(0,9,26)])
  ret or.18: bits[32] = or(shll.14, shrl.17, id=18, pos=[(0,9,19)])
}

fn __masc__rori(rs1: bits[32], shamt: bits[32]) -> bits[32] {
  literal.22: bits[32] = literal(value=32, id=22, pos=[(0,13,34)])
  sub.23: bits[32] = sub(literal.22, shamt, id=23, pos=[(0,13,37)])
  shrl.21: bits[32] = shrl(rs1, shamt, id=21, pos=[(0,13,9)])
  shll.24: bits[32] = shll(rs1, sub.23, id=24, pos=[(0,13,26)])
  ret or.25: bits[32] = or(shrl.21, shll.24, id=25, pos=[(0,13,19)])
}

fn __masc__andn(rs1: bits[32], rs2: bits[32]) -> bits[32] {
  not.28: bits[32] = not(rs2, id=28, pos=[(0,17,11)])
  ret and.29: bits[32] = and(rs1, not.28, id=29, pos=[(0,17,8)])
}

fn __masc__orn(rs1: bits[32], rs2: bits[32]) -> bits[32] {
  not.32: bits[32] = not(rs2, id=32, pos=[(0,21,11)])
  ret or.33: bits[32] = or(rs1, not.32, id=33, pos=[(0,21,8)])
}

fn __masc__xnor(rs1: bits[32], rs2: bits[32]) -> bits[32] {
  xor.36: bits[32] = xor(rs1, rs2, id=36, pos=[(0,25,10)])
  ret not.37: bits[32] = not(xor.36, id=37, pos=[(0,25,4)])
}

fn __masc__pack(rs1: bits[32], rs2: bits[32]) -> bits[32] {
  literal.42: bits[32] = literal(value=65535, id=42, pos=[(0,29,37)])
  literal.40: bits[32] = literal(value=65535, id=40, pos=[(0,29,15)])
  and.43: bits[32] = and(rs2, literal.42, id=43, pos=[(0,29,31)])
  literal.44: bits[32] = literal(value=16, id=44, pos=[(0,29,52)])
  and.41: bits[32] = and(rs1, literal.40, id=41, pos=[(0,29,9)])
  shll.45: bits[32] = shll(and.43, literal.44, id=45, pos=[(0,29,45)])
  ret or.46: bits[32] = or(and.41, shll.45, id=46, pos=[(0,29,23)])
}

fn __masc__packh(rs1: bits[32], rs2: bits[32]) -> bits[32] {
  literal.51: bits[32] = literal(value=255, id=51, pos=[(0,33,35)])
  literal.49: bits[32] = literal(value=255, id=49, pos=[(0,33,15)])
  and.52: bits[32] = and(rs2, literal.51, id=52, pos=[(0,33,29)])
  literal.53: bits[32] = literal(value=8, id=53, pos=[(0,33,48)])
  and.50: bits[32] = and(rs1, literal.49, id=50, pos=[(0,33,9)])
  shll.54: bits[32] = shll(and.52, literal.53, id=54, pos=[(0,33,41)])
  ret or.55: bits[32] = or(and.50, shll.54, id=55, pos=[(0,33,21)])
}

fn __masc__reverse_byte(input_bits: bits[32]) -> bits[32] {
  literal.57: bits[32] = literal(value=0, id=57, pos=[(0,37,39)])
  literal.61: bits[32] = literal(value=1, id=61, pos=[(0,38,39)])
  shrl.58: bits[32] = shrl(input_bits, literal.57, id=58, pos=[(0,37,32)])
  literal.59: bits[32] = literal(value=1, id=59, pos=[(0,37,48)])
  shrl.62: bits[32] = shrl(input_bits, literal.61, id=62, pos=[(0,38,32)])
  literal.63: bits[32] = literal(value=1, id=63, pos=[(0,38,48)])
  literal.65: bits[32] = literal(value=2, id=65, pos=[(0,39,39)])
  bit0: bits[32] = and(shrl.58, literal.59, id=60, pos=[(0,37,42)])
  literal.89: bits[32] = literal(value=7, id=89, pos=[(0,46,17)])
  bit1: bits[32] = and(shrl.62, literal.63, id=64, pos=[(0,38,42)])
  literal.91: bits[32] = literal(value=6, id=91, pos=[(0,46,35)])
  shrl.66: bits[32] = shrl(input_bits, literal.65, id=66, pos=[(0,39,32)])
  literal.67: bits[32] = literal(value=1, id=67, pos=[(0,39,48)])
  literal.69: bits[32] = literal(value=3, id=69, pos=[(0,40,39)])
  shll.90: bits[32] = shll(bit0, literal.89, id=90, pos=[(0,46,10)])
  shll.92: bits[32] = shll(bit1, literal.91, id=92, pos=[(0,46,28)])
  bit2: bits[32] = and(shrl.66, literal.67, id=68, pos=[(0,39,42)])
  literal.94: bits[32] = literal(value=5, id=94, pos=[(0,46,53)])
  shrl.70: bits[32] = shrl(input_bits, literal.69, id=70, pos=[(0,40,32)])
  literal.71: bits[32] = literal(value=1, id=71, pos=[(0,40,48)])
  literal.73: bits[32] = literal(value=4, id=73, pos=[(0,41,39)])
  or.93: bits[32] = or(shll.90, shll.92, id=93, pos=[(0,46,20)])
  shll.95: bits[32] = shll(bit2, literal.94, id=95, pos=[(0,46,46)])
  bit3: bits[32] = and(shrl.70, literal.71, id=72, pos=[(0,40,42)])
  literal.97: bits[32] = literal(value=4, id=97, pos=[(0,46,71)])
  shrl.74: bits[32] = shrl(input_bits, literal.73, id=74, pos=[(0,41,32)])
  literal.75: bits[32] = literal(value=1, id=75, pos=[(0,41,48)])
  literal.77: bits[32] = literal(value=5, id=77, pos=[(0,42,39)])
  or.96: bits[32] = or(or.93, shll.95, id=96, pos=[(0,46,38)])
  shll.98: bits[32] = shll(bit3, literal.97, id=98, pos=[(0,46,64)])
  bit4: bits[32] = and(shrl.74, literal.75, id=76, pos=[(0,41,42)])
  literal.100: bits[32] = literal(value=3, id=100, pos=[(0,47,17)])
  shrl.78: bits[32] = shrl(input_bits, literal.77, id=78, pos=[(0,42,32)])
  literal.79: bits[32] = literal(value=1, id=79, pos=[(0,42,48)])
  literal.81: bits[32] = literal(value=6, id=81, pos=[(0,43,39)])
  or.99: bits[32] = or(or.96, shll.98, id=99, pos=[(0,46,56)])
  shll.101: bits[32] = shll(bit4, literal.100, id=101, pos=[(0,47,10)])
  bit5: bits[32] = and(shrl.78, literal.79, id=80, pos=[(0,42,42)])
  literal.103: bits[32] = literal(value=2, id=103, pos=[(0,47,35)])
  shrl.82: bits[32] = shrl(input_bits, literal.81, id=82, pos=[(0,43,32)])
  literal.83: bits[32] = literal(value=1, id=83, pos=[(0,43,48)])
  or.102: bits[32] = or(or.99, shll.101, id=102, pos=[(0,46,74)])
  shll.104: bits[32] = shll(bit5, literal.103, id=104, pos=[(0,47,28)])
  bit6: bits[32] = and(shrl.82, literal.83, id=84, pos=[(0,43,42)])
  literal.106: bits[32] = literal(value=1, id=106, pos=[(0,47,53)])
  literal.85: bits[32] = literal(value=7, id=85, pos=[(0,44,39)])
  or.105: bits[32] = or(or.102, shll.104, id=105, pos=[(0,47,20)])
  shll.107: bits[32] = shll(bit6, literal.106, id=107, pos=[(0,47,46)])
  shrl.86: bits[32] = shrl(input_bits, literal.85, id=86, pos=[(0,44,32)])
  literal.87: bits[32] = literal(value=1, id=87, pos=[(0,44,48)])
  or.108: bits[32] = or(or.105, shll.107, id=108, pos=[(0,47,38)])
  bit7: bits[32] = and(shrl.86, literal.87, id=88, pos=[(0,44,42)])
  ret or.109: bits[32] = or(or.108, bit7, id=109, pos=[(0,47,56)])
}

fn __masc__brev8(rs: bits[32]) -> bits[32] {
  literal.114: bits[32] = literal(value=8, id=114, pos=[(0,52,45)])
  shrl.115: bits[32] = shrl(rs, literal.114, id=115, pos=[(0,52,38)])
  literal.116: bits[32] = literal(value=255, id=116, pos=[(0,52,54)])
  literal.119: bits[32] = literal(value=16, id=119, pos=[(0,53,45)])
  literal.111: bits[32] = literal(value=255, id=111, pos=[(0,51,43)])
  and.117: bits[32] = and(shrl.115, literal.116, id=117, pos=[(0,52,48)])
  shrl.120: bits[32] = shrl(rs, literal.119, id=120, pos=[(0,53,38)])
  literal.121: bits[32] = literal(value=255, id=121, pos=[(0,53,55)])
  literal.124: bits[32] = literal(value=24, id=124, pos=[(0,54,45)])
  and.112: bits[32] = and(rs, literal.111, id=112, pos=[(0,51,37)])
  byte1: bits[32] = invoke(and.117, to_apply=__masc__reverse_byte, id=118, pos=[(0,52,33)])
  literal.129: bits[32] = literal(value=8, id=129, pos=[(0,56,26)])
  and.122: bits[32] = and(shrl.120, literal.121, id=122, pos=[(0,53,49)])
  shrl.125: bits[32] = shrl(rs, literal.124, id=125, pos=[(0,54,38)])
  literal.126: bits[32] = literal(value=255, id=126, pos=[(0,54,55)])
  byte0: bits[32] = invoke(and.112, to_apply=__masc__reverse_byte, id=113, pos=[(0,51,33)])
  shll.130: bits[32] = shll(byte1, literal.129, id=130, pos=[(0,56,19)])
  byte2: bits[32] = invoke(and.122, to_apply=__masc__reverse_byte, id=123, pos=[(0,53,33)])
  literal.132: bits[32] = literal(value=16, id=132, pos=[(0,56,45)])
  and.127: bits[32] = and(shrl.125, literal.126, id=127, pos=[(0,54,49)])
  or.131: bits[32] = or(byte0, shll.130, id=131, pos=[(0,56,10)])
  shll.133: bits[32] = shll(byte2, literal.132, id=133, pos=[(0,56,38)])
  byte3: bits[32] = invoke(and.127, to_apply=__masc__reverse_byte, id=128, pos=[(0,54,33)])
  literal.135: bits[32] = literal(value=24, id=135, pos=[(0,56,65)])
  or.134: bits[32] = or(or.131, shll.133, id=134, pos=[(0,56,29)])
  shll.136: bits[32] = shll(byte3, literal.135, id=136, pos=[(0,56,58)])
  ret or.137: bits[32] = or(or.134, shll.136, id=137, pos=[(0,56,49)])
}

fn __masc__rev8(rs: bits[32]) -> bits[32] {
  literal.141: bits[32] = literal(value=8, id=141, pos=[(0,61,32)])
  literal.139: bits[32] = literal(value=255, id=139, pos=[(0,60,30)])
  shrl.142: bits[32] = shrl(rs, literal.141, id=142, pos=[(0,61,25)])
  literal.143: bits[32] = literal(value=255, id=143, pos=[(0,61,41)])
  literal.145: bits[32] = literal(value=16, id=145, pos=[(0,62,32)])
  byte0: bits[32] = and(rs, literal.139, id=140, pos=[(0,60,24)])
  literal.153: bits[32] = literal(value=24, id=153, pos=[(0,65,17)])
  byte1: bits[32] = and(shrl.142, literal.143, id=144, pos=[(0,61,35)])
  literal.155: bits[32] = literal(value=16, id=155, pos=[(0,65,35)])
  shrl.146: bits[32] = shrl(rs, literal.145, id=146, pos=[(0,62,25)])
  literal.147: bits[32] = literal(value=255, id=147, pos=[(0,62,42)])
  shll.154: bits[32] = shll(byte0, literal.153, id=154, pos=[(0,65,10)])
  shll.156: bits[32] = shll(byte1, literal.155, id=156, pos=[(0,65,28)])
  byte2: bits[32] = and(shrl.146, literal.147, id=148, pos=[(0,62,36)])
  literal.158: bits[32] = literal(value=8, id=158, pos=[(0,65,53)])
  literal.149: bits[32] = literal(value=24, id=149, pos=[(0,63,32)])
  or.157: bits[32] = or(shll.154, shll.156, id=157, pos=[(0,65,20)])
  shll.159: bits[32] = shll(byte2, literal.158, id=159, pos=[(0,65,46)])
  shrl.150: bits[32] = shrl(rs, literal.149, id=150, pos=[(0,63,25)])
  literal.151: bits[32] = literal(value=255, id=151, pos=[(0,63,42)])
  or.160: bits[32] = or(or.157, shll.159, id=160, pos=[(0,65,38)])
  byte3: bits[32] = and(shrl.150, literal.151, id=152, pos=[(0,63,36)])
  ret or.161: bits[32] = or(or.160, byte3, id=161, pos=[(0,65,55)])
}

fn ____masc__zip_counted_for_0_body(i: bits[32], acc: bits[32], rs1: bits[32]) -> bits[32] {
  literal.166: bits[32] = literal(value=0, id=166)
  add.167: bits[32] = add(i, literal.166, id=167)
  literal.170: bits[32] = literal(value=16, id=170, pos=[(0,69,8)])
  add.174: bits[32] = add(add.167, literal.170, id=174, pos=[(0,72,40)])
  literal.181: bits[32] = literal(value=2, id=181, pos=[(0,73,81)])
  shrl.171: bits[32] = shrl(rs1, add.167, id=171, pos=[(0,71,34)])
  literal.172: bits[32] = literal(value=1, id=172, pos=[(0,71,46)])
  literal.178: bits[32] = literal(value=2, id=178, pos=[(0,73,52)])
  shrl.175: bits[32] = shrl(rs1, add.174, id=175, pos=[(0,72,34)])
  literal.176: bits[32] = literal(value=1, id=176, pos=[(0,72,60)])
  umul.182: bits[32] = umul(literal.181, add.167, id=182, pos=[(0,73,83)])
  literal.183: bits[32] = literal(value=1, id=183, pos=[(0,73,93)])
  lower_bit: bits[32] = and(shrl.171, literal.172, id=173, pos=[(0,71,40)])
  umul.179: bits[32] = umul(literal.178, add.167, id=179, pos=[(0,73,54)])
  upper_bit: bits[32] = and(shrl.175, literal.176, id=177, pos=[(0,72,54)])
  add.184: bits[32] = add(umul.182, literal.183, id=184, pos=[(0,73,87)])
  shll.180: bits[32] = shll(lower_bit, umul.179, id=180, pos=[(0,73,44)])
  shll.185: bits[32] = shll(upper_bit, add.184, id=185, pos=[(0,73,73)])
  combined_bits: bits[32] = or(shll.180, shll.185, id=186, pos=[(0,73,60)])
  ret or.187: bits[32] = or(acc, combined_bits, id=187, pos=[(0,74,12)])
}

fn __masc__zip(rs1: bits[32]) -> bits[32] {
  literal.164: bits[32] = literal(value=0, id=164, pos=[(0,75,10)])
  xlen_half: bits[32] = literal(value=16, id=163, pos=[(0,69,29)])
  ret result: bits[32] = counted_for(literal.164, trip_count=16, stride=1, body=____masc__zip_counted_for_0_body, invariant_args=[rs1], id=188)
}

fn ____masc__unzip_counted_for_0_body(i: bits[32], acc: bits[32], rs1: bits[32]) -> bits[32] {
  literal.193: bits[32] = literal(value=0, id=193)
  add.194: bits[32] = add(i, literal.193, id=194)
  literal.198: bits[32] = literal(value=2, id=198, pos=[(0,85,45)])
  literal.203: bits[32] = literal(value=2, id=203, pos=[(0,86,44)])
  umul.199: bits[32] = umul(add.194, literal.198, id=199, pos=[(0,85,39)])
  umul.204: bits[32] = umul(add.194, literal.203, id=204, pos=[(0,86,38)])
  literal.205: bits[32] = literal(value=1, id=205, pos=[(0,86,52)])
  shrl.200: bits[32] = shrl(rs1, umul.199, id=200, pos=[(0,85,33)])
  literal.201: bits[32] = literal(value=1, id=201, pos=[(0,85,55)])
  add.206: bits[32] = add(umul.204, literal.205, id=206, pos=[(0,86,46)])
  even_bit: bits[32] = and(shrl.200, literal.201, id=202, pos=[(0,85,49)])
  shrl.207: bits[32] = shrl(rs1, add.206, id=207, pos=[(0,86,32)])
  literal.208: bits[32] = literal(value=1, id=208, pos=[(0,86,62)])
  literal.197: bits[32] = literal(value=16, id=197, pos=[(0,81,8)])
  shll.210: bits[32] = shll(even_bit, add.194, id=210, pos=[(0,88,24)])
  odd_bit: bits[32] = and(shrl.207, literal.208, id=209, pos=[(0,86,56)])
  add.212: bits[32] = add(add.194, literal.197, id=212, pos=[(0,88,47)])
  add.211: bits[32] = add(acc, shll.210, id=211, pos=[(0,88,12)])
  shll.213: bits[32] = shll(odd_bit, add.212, id=213, pos=[(0,88,41)])
  ret add.214: bits[32] = add(add.211, shll.213, id=214, pos=[(0,88,30)])
}

fn __masc__unzip(rs1: bits[32]) -> bits[32] {
  literal.191: bits[32] = literal(value=0, id=191, pos=[(0,89,10)])
  xlen_half: bits[32] = literal(value=16, id=190, pos=[(0,81,29)])
  ret rd: bits[32] = counted_for(literal.191, trip_count=16, stride=1, body=____masc__unzip_counted_for_0_body, invariant_args=[rs1], id=215)
}

fn __masc__sha512sum0r(rs1: bits[32], rs2: bits[32]) -> bits[32] {
  XLEN: bits[32] = literal(value=32, id=218, pos=[(0,0,22)])
  literal.219: bits[32] = literal(value=64, id=219, pos=[(0,193,45)])
  eq.220: bits[1] = eq(XLEN, literal.219, id=220, pos=[(0,193,38)])
  literal.222: bits[32] = literal(value=2, id=222, pos=[(0,193,70)])
  literal.221: bits[32] = literal(value=34, id=221, pos=[(0,193,54)])
  literal.224: bits[32] = literal(value=64, id=224, pos=[(0,195,45)])
  literal.229: bits[32] = literal(value=28, id=229, pos=[(0,201,39)])
  rotation_val_2: bits[32] = sel(eq.220, cases=[literal.222, literal.221], id=223, pos=[(0,193,30)])
  eq.225: bits[1] = eq(XLEN, literal.224, id=225, pos=[(0,195,38)])
  literal.227: bits[32] = literal(value=7, id=227, pos=[(0,195,70)])
  literal.226: bits[32] = literal(value=39, id=226, pos=[(0,195,54)])
  rotation_1: bits[32] = invoke(rs1, literal.229, to_apply=__masc__ror, id=230, pos=[(0,201,29)])
  rotation_2: bits[32] = invoke(rs1, rotation_val_2, to_apply=__masc__ror, id=231, pos=[(0,203,29)])
  rotation_val_3: bits[32] = sel(eq.225, cases=[literal.227, literal.226], id=228, pos=[(0,195,30)])
  xor.233: bits[32] = xor(rotation_1, rotation_2, id=233, pos=[(0,211,33)])
  rotation_3: bits[32] = invoke(rs1, rotation_val_3, to_apply=__masc__ror, id=232, pos=[(0,205,29)])
  ret result: bits[32] = xor(xor.233, rotation_3, id=234, pos=[(0,211,46)])
}

fn __masc__sha256sum0(rs1: bits[32]) -> bits[32] {
  literal.236: bits[32] = literal(value=2, id=236, pos=[(0,114,29)])
  literal.238: bits[32] = literal(value=13, id=238, pos=[(0,115,29)])
  rot_a: bits[32] = invoke(rs1, literal.236, to_apply=__masc__ror, id=237, pos=[(0,114,19)])
  rot_b: bits[32] = invoke(rs1, literal.238, to_apply=__masc__ror, id=239, pos=[(0,115,19)])
  literal.240: bits[32] = literal(value=22, id=240, pos=[(0,116,29)])
  xor.242: bits[32] = xor(rot_a, rot_b, id=242, pos=[(0,117,10)])
  rot_c: bits[32] = invoke(rs1, literal.240, to_apply=__masc__ror, id=241, pos=[(0,116,19)])
  ret xor.243: bits[32] = xor(xor.242, rot_c, id=243, pos=[(0,117,18)])
}

fn __masc__sha512sig0l(rs1: bits[32], rs2: bits[32]) -> bits[32] {
  literal.246: bits[32] = literal(value=1, id=246, pos=[(0,145,34)])
  literal.248: bits[32] = literal(value=8, id=248, pos=[(0,146,34)])
  rotation_1: bits[32] = invoke(rs1, literal.246, to_apply=__masc__ror, id=247, pos=[(0,145,24)])
  rotation_2: bits[32] = invoke(rs1, literal.248, to_apply=__masc__ror, id=249, pos=[(0,146,24)])
  literal.250: bits[32] = literal(value=7, id=250, pos=[(0,147,29)])
  xor.254: bits[32] = xor(rotation_1, rotation_2, id=254, pos=[(0,152,15)])
  shift_1: bits[32] = shrl(rs1, literal.250, id=251, pos=[(0,147,22)])
  xor.255: bits[32] = xor(xor.254, shift_1, id=255, pos=[(0,152,28)])
  combined_1: bits[32] = and(rotation_1, rs2, id=252, pos=[(0,149,32)])
  xor.256: bits[32] = xor(xor.255, combined_1, id=256, pos=[(0,152,38)])
  combined_2: bits[32] = or(rotation_2, rs2, id=253, pos=[(0,150,32)])
  ret xor.257: bits[32] = xor(xor.256, combined_2, id=257, pos=[(0,152,51)])
}

fn __masc__sha256sig0(rs1: bits[32]) -> bits[32] {
  literal.259: bits[32] = literal(value=7, id=259, pos=[(0,95,30)])
  literal.261: bits[32] = literal(value=18, id=261, pos=[(0,96,31)])
  rotate_7: bits[32] = invoke(rs1, literal.259, to_apply=__masc__ror, id=260, pos=[(0,95,20)])
  rotate_18: bits[32] = invoke(rs1, literal.261, to_apply=__masc__ror, id=262, pos=[(0,96,21)])
  literal.263: bits[32] = literal(value=3, id=263, pos=[(0,97,27)])
  xor.265: bits[32] = xor(rotate_7, rotate_18, id=265, pos=[(0,99,11)])
  shift_3: bits[32] = shrl(rs1, literal.263, id=264, pos=[(0,97,20)])
  ret xor.266: bits[32] = xor(xor.265, shift_3, id=266, pos=[(0,99,23)])
}

fn __masc__sha256sum1(rs1: bits[32]) -> bits[32] {
  literal.268: bits[32] = literal(value=6, id=268, pos=[(0,122,32)])
  literal.270: bits[32] = literal(value=11, id=270, pos=[(0,123,32)])
  rotation_1: bits[32] = invoke(rs1, literal.268, to_apply=__masc__ror, id=269, pos=[(0,122,22)])
  rotation_2: bits[32] = invoke(rs1, literal.270, to_apply=__masc__ror, id=271, pos=[(0,123,22)])
  literal.272: bits[32] = literal(value=25, id=272, pos=[(0,124,32)])
  xor.274: bits[32] = xor(rotation_1, rotation_2, id=274, pos=[(0,125,13)])
  rotation_3: bits[32] = invoke(rs1, literal.272, to_apply=__masc__ror, id=273, pos=[(0,124,22)])
  ret xor.275: bits[32] = xor(xor.274, rotation_3, id=275, pos=[(0,125,26)])
}

fn __masc__sha512sig1h(rs1: bits[32], rs2: bits[32]) -> bits[32] {
  literal.278: bits[32] = literal(value=14, id=278, pos=[(0,159,34)])
  literal.280: bits[32] = literal(value=18, id=280, pos=[(0,161,34)])
  rotation_1: bits[32] = invoke(rs1, literal.278, to_apply=__masc__ror, id=279, pos=[(0,159,24)])
  rotation_2: bits[32] = invoke(rs1, literal.280, to_apply=__masc__ror, id=281, pos=[(0,161,24)])
  literal.282: bits[32] = literal(value=9, id=282, pos=[(0,163,34)])
  xor.284: bits[32] = xor(rotation_1, rotation_2, id=284, pos=[(0,169,28)])
  rotation_3: bits[32] = invoke(rs2, literal.282, to_apply=__masc__ror, id=283, pos=[(0,163,24)])
  ret result: bits[32] = xor(xor.284, rotation_3, id=285, pos=[(0,169,41)])
}

fn __masc__sha512sig0h(rs1: bits[32], rs2: bits[32]) -> bits[32] {
  literal.288: bits[32] = literal(value=28, id=288, pos=[(0,131,32)])
  literal.290: bits[32] = literal(value=34, id=290, pos=[(0,132,32)])
  rotation_1: bits[32] = invoke(rs1, literal.288, to_apply=__masc__ror, id=289, pos=[(0,131,22)])
  rotation_2: bits[32] = invoke(rs1, literal.290, to_apply=__masc__ror, id=291, pos=[(0,132,22)])
  literal.292: bits[32] = literal(value=39, id=292, pos=[(0,133,32)])
  xor.297: bits[32] = xor(rotation_1, rotation_2, id=297, pos=[(0,140,13)])
  rotation_3: bits[32] = invoke(rs1, literal.292, to_apply=__masc__ror, id=293, pos=[(0,133,22)])
  xor.298: bits[32] = xor(xor.297, rotation_3, id=298, pos=[(0,140,26)])
  combined_1: bits[32] = and(rotation_1, rs2, id=294, pos=[(0,135,30)])
  xor.299: bits[32] = xor(xor.298, combined_1, id=299, pos=[(0,140,39)])
  combined_2: bits[32] = or(rotation_2, rs2, id=295, pos=[(0,136,30)])
  xor.300: bits[32] = xor(xor.299, combined_2, id=300, pos=[(0,140,52)])
  combined_3: bits[32] = xor(rotation_3, rs2, id=296, pos=[(0,137,30)])
  ret xor.301: bits[32] = xor(xor.300, combined_3, id=301, pos=[(0,140,65)])
}

fn __masc__sha512sig1l(rs1: bits[32], rs2: bits[32]) -> bits[32] {
  literal.304: bits[32] = literal(value=16, id=304, pos=[(0,180,37)])
  literal.306: bits[32] = literal(value=6, id=306, pos=[(0,181,37)])
  rotation_1: bits[32] = invoke(rs1, literal.304, to_apply=__masc__ror, id=305, pos=[(0,180,27)])
  rotation_2: bits[32] = invoke(rs2, literal.306, to_apply=__masc__ror, id=307, pos=[(0,181,27)])
  literal.308: bits[32] = literal(value=23, id=308, pos=[(0,182,32)])
  xor.310: bits[32] = xor(rotation_1, rotation_2, id=310, pos=[(0,184,31)])
  shift_1: bits[32] = shrl(rs1, literal.308, id=309, pos=[(0,182,25)])
  ret result: bits[32] = xor(xor.310, shift_1, id=311, pos=[(0,184,44)])
}

fn __masc__SHA512SUM1R(rs1: bits[32], rs2: bits[32]) -> bits[32] {
  literal.314: bits[32] = literal(value=19, id=314, pos=[(0,221,39)])
  literal.316: bits[32] = literal(value=29, id=316, pos=[(0,222,39)])
  rotation_1: bits[32] = invoke(rs1, literal.314, to_apply=__masc__ror, id=315, pos=[(0,221,29)])
  rotation_2: bits[32] = invoke(rs1, literal.316, to_apply=__masc__ror, id=317, pos=[(0,222,29)])
  literal.318: bits[32] = literal(value=6, id=318, pos=[(0,223,34)])
  xor.320: bits[32] = xor(rotation_1, rotation_2, id=320, pos=[(0,225,15)])
  shifted: bits[32] = shrl(rs1, literal.318, id=319, pos=[(0,223,27)])
  ret xor.321: bits[32] = xor(xor.320, shifted, id=321, pos=[(0,225,28)])
}

fn __masc__right_rotate(value: bits[32], shift: bits[32]) -> bits[32] {
  literal.325: bits[32] = literal(value=32, id=325, pos=[(0,103,38)])
  sub.326: bits[32] = sub(literal.325, shift, id=326, pos=[(0,103,41)])
  shrl.324: bits[32] = shrl(value, shift, id=324, pos=[(0,103,11)])
  shll.327: bits[32] = shll(value, sub.326, id=327, pos=[(0,103,30)])
  ret or.328: bits[32] = or(shrl.324, shll.327, id=328, pos=[(0,103,21)])
}

fn __masc__sha256sig1(rs1: bits[32]) -> bits[32] {
  literal.330: bits[32] = literal(value=17, id=330, pos=[(0,107,39)])
  literal.332: bits[32] = literal(value=19, id=332, pos=[(0,108,39)])
  rot_17: bits[32] = invoke(rs1, literal.330, to_apply=__masc__right_rotate, id=331, pos=[(0,107,29)])
  rot_19: bits[32] = invoke(rs1, literal.332, to_apply=__masc__right_rotate, id=333, pos=[(0,108,29)])
  literal.334: bits[32] = literal(value=10, id=334, pos=[(0,109,31)])
  xor.336: bits[32] = xor(rot_17, rot_19, id=336, pos=[(0,110,11)])
  rshift_10: bits[32] = shrl(rs1, literal.334, id=335, pos=[(0,109,24)])
  ret xor.337: bits[32] = xor(xor.336, rshift_10, id=337, pos=[(0,110,20)])
}

top fn __masc__execute(instruction: bits[32], rs1: bits[32], rs2: bits[32]) -> (bits[32], bits[1]) {
  literal.446: bits[32] = literal(value=21, id=446, pos=[(0,281,15)])
  literal.441: bits[32] = literal(value=20, id=441, pos=[(0,280,15)])
  literal.436: bits[32] = literal(value=19, id=436, pos=[(0,279,15)])
  literal.431: bits[32] = literal(value=18, id=431, pos=[(0,278,15)])
  literal.426: bits[32] = literal(value=17, id=426, pos=[(0,277,15)])
  literal.421: bits[32] = literal(value=16, id=421, pos=[(0,276,15)])
  literal.416: bits[32] = literal(value=15, id=416, pos=[(0,275,15)])
  literal.411: bits[32] = literal(value=14, id=411, pos=[(0,274,15)])
  literal.406: bits[32] = literal(value=13, id=406, pos=[(0,273,15)])
  literal.401: bits[32] = literal(value=12, id=401, pos=[(0,272,15)])
  literal.396: bits[32] = literal(value=11, id=396, pos=[(0,271,15)])
  literal.391: bits[32] = literal(value=10, id=391, pos=[(0,270,15)])
  literal.386: bits[32] = literal(value=9, id=386, pos=[(0,269,15)])
  literal.381: bits[32] = literal(value=8, id=381, pos=[(0,268,15)])
  literal.376: bits[32] = literal(value=7, id=376, pos=[(0,267,15)])
  literal.371: bits[32] = literal(value=6, id=371, pos=[(0,266,15)])
  literal.366: bits[32] = literal(value=5, id=366, pos=[(0,265,15)])
  literal.361: bits[32] = literal(value=4, id=361, pos=[(0,264,15)])
  literal.356: bits[32] = literal(value=3, id=356, pos=[(0,263,15)])
  literal.351: bits[32] = literal(value=2, id=351, pos=[(0,262,15)])
  literal.346: bits[32] = literal(value=1, id=346, pos=[(0,261,15)])
  literal.341: bits[32] = literal(value=0, id=341, pos=[(0,260,15)])
  eq.447: bits[1] = eq(literal.446, instruction, id=447)
  eq.442: bits[1] = eq(literal.441, instruction, id=442)
  eq.437: bits[1] = eq(literal.436, instruction, id=437)
  eq.432: bits[1] = eq(literal.431, instruction, id=432)
  eq.427: bits[1] = eq(literal.426, instruction, id=427)
  eq.422: bits[1] = eq(literal.421, instruction, id=422)
  eq.417: bits[1] = eq(literal.416, instruction, id=417)
  eq.412: bits[1] = eq(literal.411, instruction, id=412)
  eq.407: bits[1] = eq(literal.406, instruction, id=407)
  eq.402: bits[1] = eq(literal.401, instruction, id=402)
  eq.397: bits[1] = eq(literal.396, instruction, id=397)
  eq.392: bits[1] = eq(literal.391, instruction, id=392)
  eq.387: bits[1] = eq(literal.386, instruction, id=387)
  eq.382: bits[1] = eq(literal.381, instruction, id=382)
  eq.377: bits[1] = eq(literal.376, instruction, id=377)
  eq.372: bits[1] = eq(literal.371, instruction, id=372)
  eq.367: bits[1] = eq(literal.366, instruction, id=367)
  eq.362: bits[1] = eq(literal.361, instruction, id=362)
  eq.357: bits[1] = eq(literal.356, instruction, id=357)
  eq.352: bits[1] = eq(literal.351, instruction, id=352)
  eq.347: bits[1] = eq(literal.346, instruction, id=347)
  eq.342: bits[1] = eq(literal.341, instruction, id=342)
  concat.455: bits[22] = concat(eq.447, eq.442, eq.437, eq.432, eq.427, eq.422, eq.417, eq.412, eq.407, eq.402, eq.397, eq.392, eq.387, eq.382, eq.377, eq.372, eq.367, eq.362, eq.357, eq.352, eq.347, eq.342, id=455)
  invoke.343: bits[32] = invoke(rs1, rs2, to_apply=__masc__ror, id=343, pos=[(0,260,28)])
  literal.344: bits[1] = literal(value=1, id=344, pos=[(0,260,40)])
  invoke.348: bits[32] = invoke(rs1, rs2, to_apply=__masc__rol, id=348, pos=[(0,261,28)])
  literal.349: bits[1] = literal(value=1, id=349, pos=[(0,261,40)])
  invoke.353: bits[32] = invoke(rs1, rs2, to_apply=__masc__rori, id=353, pos=[(0,262,30)])
  literal.354: bits[1] = literal(value=1, id=354, pos=[(0,262,42)])
  invoke.358: bits[32] = invoke(rs1, rs2, to_apply=__masc__andn, id=358, pos=[(0,263,30)])
  literal.359: bits[1] = literal(value=1, id=359, pos=[(0,263,42)])
  invoke.363: bits[32] = invoke(rs1, rs2, to_apply=__masc__orn, id=363, pos=[(0,264,28)])
  literal.364: bits[1] = literal(value=1, id=364, pos=[(0,264,40)])
  invoke.368: bits[32] = invoke(rs1, rs2, to_apply=__masc__xnor, id=368, pos=[(0,265,30)])
  literal.369: bits[1] = literal(value=1, id=369, pos=[(0,265,42)])
  invoke.373: bits[32] = invoke(rs1, rs2, to_apply=__masc__pack, id=373, pos=[(0,266,30)])
  literal.374: bits[1] = literal(value=1, id=374, pos=[(0,266,42)])
  invoke.378: bits[32] = invoke(rs1, rs2, to_apply=__masc__packh, id=378, pos=[(0,267,32)])
  literal.379: bits[1] = literal(value=1, id=379, pos=[(0,267,44)])
  invoke.383: bits[32] = invoke(rs1, to_apply=__masc__brev8, id=383, pos=[(0,268,32)])
  literal.384: bits[1] = literal(value=1, id=384, pos=[(0,268,39)])
  invoke.388: bits[32] = invoke(rs1, to_apply=__masc__rev8, id=388, pos=[(0,269,30)])
  literal.389: bits[1] = literal(value=1, id=389, pos=[(0,269,37)])
  invoke.393: bits[32] = invoke(rs1, to_apply=__masc__zip, id=393, pos=[(0,270,28)])
  literal.394: bits[1] = literal(value=1, id=394, pos=[(0,270,35)])
  invoke.398: bits[32] = invoke(rs1, to_apply=__masc__unzip, id=398, pos=[(0,271,32)])
  literal.399: bits[1] = literal(value=1, id=399, pos=[(0,271,39)])
  invoke.403: bits[32] = invoke(rs1, rs2, to_apply=__masc__sha512sum0r, id=403, pos=[(0,272,44)])
  literal.404: bits[1] = literal(value=1, id=404, pos=[(0,272,56)])
  invoke.408: bits[32] = invoke(rs1, to_apply=__masc__sha256sum0, id=408, pos=[(0,273,42)])
  literal.409: bits[1] = literal(value=1, id=409, pos=[(0,273,49)])
  invoke.413: bits[32] = invoke(rs1, rs2, to_apply=__masc__sha512sig0l, id=413, pos=[(0,274,44)])
  literal.414: bits[1] = literal(value=1, id=414, pos=[(0,274,56)])
  invoke.418: bits[32] = invoke(rs1, to_apply=__masc__sha256sig0, id=418, pos=[(0,275,42)])
  literal.419: bits[1] = literal(value=1, id=419, pos=[(0,275,49)])
  invoke.423: bits[32] = invoke(rs1, to_apply=__masc__sha256sum1, id=423, pos=[(0,276,42)])
  literal.424: bits[1] = literal(value=1, id=424, pos=[(0,276,49)])
  invoke.428: bits[32] = invoke(rs1, rs2, to_apply=__masc__sha512sig1h, id=428, pos=[(0,277,44)])
  literal.429: bits[1] = literal(value=1, id=429, pos=[(0,277,56)])
  invoke.433: bits[32] = invoke(rs1, rs2, to_apply=__masc__sha512sig0h, id=433, pos=[(0,278,44)])
  literal.434: bits[1] = literal(value=1, id=434, pos=[(0,278,56)])
  invoke.438: bits[32] = invoke(rs1, rs2, to_apply=__masc__sha512sig1l, id=438, pos=[(0,279,44)])
  literal.439: bits[1] = literal(value=1, id=439, pos=[(0,279,56)])
  invoke.443: bits[32] = invoke(rs1, rs2, to_apply=__masc__SHA512SUM1R, id=443, pos=[(0,280,44)])
  literal.444: bits[1] = literal(value=1, id=444, pos=[(0,280,56)])
  invoke.448: bits[32] = invoke(rs1, to_apply=__masc__sha256sig1, id=448, pos=[(0,281,42)])
  literal.449: bits[1] = literal(value=1, id=449, pos=[(0,281,49)])
  literal.452: bits[32] = literal(value=0, id=452, pos=[(0,282,14)])
  literal.453: bits[1] = literal(value=0, id=453, pos=[(0,282,17)])
  one_hot.456: bits[23] = one_hot(concat.455, lsb_prio=true, id=456)
  tuple.345: (bits[32], bits[1]) = tuple(invoke.343, literal.344, id=345, pos=[(0,260,24)])
  tuple.350: (bits[32], bits[1]) = tuple(invoke.348, literal.349, id=350, pos=[(0,261,24)])
  tuple.355: (bits[32], bits[1]) = tuple(invoke.353, literal.354, id=355, pos=[(0,262,25)])
  tuple.360: (bits[32], bits[1]) = tuple(invoke.358, literal.359, id=360, pos=[(0,263,25)])
  tuple.365: (bits[32], bits[1]) = tuple(invoke.363, literal.364, id=365, pos=[(0,264,24)])
  tuple.370: (bits[32], bits[1]) = tuple(invoke.368, literal.369, id=370, pos=[(0,265,25)])
  tuple.375: (bits[32], bits[1]) = tuple(invoke.373, literal.374, id=375, pos=[(0,266,25)])
  tuple.380: (bits[32], bits[1]) = tuple(invoke.378, literal.379, id=380, pos=[(0,267,26)])
  tuple.385: (bits[32], bits[1]) = tuple(invoke.383, literal.384, id=385, pos=[(0,268,26)])
  tuple.390: (bits[32], bits[1]) = tuple(invoke.388, literal.389, id=390, pos=[(0,269,25)])
  tuple.395: (bits[32], bits[1]) = tuple(invoke.393, literal.394, id=395, pos=[(0,270,24)])
  tuple.400: (bits[32], bits[1]) = tuple(invoke.398, literal.399, id=400, pos=[(0,271,26)])
  tuple.405: (bits[32], bits[1]) = tuple(invoke.403, literal.404, id=405, pos=[(0,272,32)])
  tuple.410: (bits[32], bits[1]) = tuple(invoke.408, literal.409, id=410, pos=[(0,273,31)])
  tuple.415: (bits[32], bits[1]) = tuple(invoke.413, literal.414, id=415, pos=[(0,274,32)])
  tuple.420: (bits[32], bits[1]) = tuple(invoke.418, literal.419, id=420, pos=[(0,275,31)])
  tuple.425: (bits[32], bits[1]) = tuple(invoke.423, literal.424, id=425, pos=[(0,276,31)])
  tuple.430: (bits[32], bits[1]) = tuple(invoke.428, literal.429, id=430, pos=[(0,277,32)])
  tuple.435: (bits[32], bits[1]) = tuple(invoke.433, literal.434, id=435, pos=[(0,278,32)])
  tuple.440: (bits[32], bits[1]) = tuple(invoke.438, literal.439, id=440, pos=[(0,279,32)])
  tuple.445: (bits[32], bits[1]) = tuple(invoke.443, literal.444, id=445, pos=[(0,280,32)])
  tuple.450: (bits[32], bits[1]) = tuple(invoke.448, literal.449, id=450, pos=[(0,281,31)])
  tuple.454: (bits[32], bits[1]) = tuple(literal.452, literal.453, id=454, pos=[(0,282,9)])
  literal.451: bits[1] = literal(value=1, id=451, pos=[(0,282,4)])
  ret one_hot_sel.457: (bits[32], bits[1]) = one_hot_sel(one_hot.456, cases=[tuple.345, tuple.350, tuple.355, tuple.360, tuple.365, tuple.370, tuple.375, tuple.380, tuple.385, tuple.390, tuple.395, tuple.400, tuple.405, tuple.410, tuple.415, tuple.420, tuple.425, tuple.430, tuple.435, tuple.440, tuple.445, tuple.450, tuple.454], id=457)
}
